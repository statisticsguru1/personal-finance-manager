[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Proprietary License","title":"Proprietary License","text":"© 2025 Festus Nzuma. rights reserved. software proprietary open source. may : Use, copy, redistribute code Modify create derivative works Deploy code public commercial setting Viewing code allowed evaluation purposes. 📩 Contact: mutindafestus27@gmail.com licensing inquiries.","code":""},{"path":"/articles/account_lifecycle.html","id":"account-lifecycle-and-behavior","dir":"Articles","previous_headings":"","what":"🔄 Account Lifecycle and Behavior","title":"Account Lifecycle and Behavior","text":"vignette explains finman manages life cycle accounts — creation, activation, allocation, reactivation obligations met missed.","code":""},{"path":"/articles/account_lifecycle.html","id":"account-creation","dir":"Articles","previous_headings":"🔄 Account Lifecycle and Behavior","what":"🏗️ 1. Account Creation","title":"Account Lifecycle and Behavior","text":"Accounts finman hierarchical: MainAccount sits top receives deposits. ChildAccounts receive allocations main account (group obligations). GrandchildAccounts track specific obligations like rent, loans insurance etc.","code":"main <- MainAccount$new(\"Main\") needs <- ChildAccount$new(\"Needs\", allocation = 0.5) savings <- ChildAccount$new(\"Savings\", allocation = 0.3) debt <- ChildAccount$new(\"Debt\", allocation = 0.2)  main$add_child_account(needs) main$add_child_account(savings) main$add_child_account(debt) # Simulate overdue rent <- GrandchildAccount$new(\"Rent\",                                freq =1,                               due_date = Sys.Date() - 6,                               fixed_amount = 5000,                               account_type = \"Bill\") needs$add_child_account(rent)"},{"path":"/articles/account_lifecycle.html","id":"account-status-active-vs-inactive","dir":"Articles","previous_headings":"🔄 Account Lifecycle and Behavior","what":"🔋 2. Account Status: Active vs Inactive","title":"Account Lifecycle and Behavior","text":"Accounts allocation (allocation = 0) inactive default. Accounts become inactive obligations fully met. Inactive accounts receive allocations.","code":"rent$status  # \"inactive\" #> [1] \"inactive\""},{"path":"/articles/account_lifecycle.html","id":"reactivating-accounts","dir":"Articles","previous_headings":"🔄 Account Lifecycle and Behavior > 🔋 2. Account Status: Active vs Inactive","what":"🛠️ Reactivating Accounts","title":"Account Lifecycle and Behavior","text":"Accounts reactivated automatically : due date reached passed. pending obligations (unpaid periods). can also manually reactivate:","code":"needs$set_child_allocation(\"Rent\", 0.5) #>  #> Child Accounts of Needs : #> - Rent rent$change_status(\"active\") #> Rent has become active . rent$status #> [1] \"active\""},{"path":"/articles/account_lifecycle.html","id":"automatic-reactivation-by-due-date","dir":"Articles","previous_headings":"🔄 Account Lifecycle and Behavior","what":"🔁 3. Automatic Reactivation by Due Date","title":"Account Lifecycle and Behavior","text":"deposit made bills due date passed, account automatically extend due period reactivate :","code":"rent$deposit(10000, channel = \"Bank\",transaction_date = Sys.Date() - 8) # funded days before due #> Deposited: 5000 via Bank - Transaction ID: SYS890E49E5C1  #> Rent has become inactive . #> Extra amount of 5000 moved to Needs  #> Rent fully funded for 1 period(s) rent$get_account_status() #> Rent is inactive #> [1] \"inactive\" rent$get_account_periods() #> [1] 1 rent$deposit(1000, channel = \"Bank\",transaction_date = Sys.Date() - 3) #> Due date extended. Number of periods unpaid: 2  #> Rent reactivated. Outstanding balance due: 5000  #> Deposited: 1000 via Bank - Transaction ID: SYS5CB1C02BA0 rent$get_account_status() #> Rent is active #> [1] \"active\" rent$get_account_periods() #> [1] 2"},{"path":"/articles/account_lifecycle.html","id":"priority-based-greedy-allocation","dir":"Articles","previous_headings":"🔄 Account Lifecycle and Behavior","what":"📈 4. Priority-Based Greedy Allocation","title":"Account Lifecycle and Behavior","text":"multiple children active, allocations follow priority field: Higher priority accounts receive funds first. Allocation based defined percentages (allocation).active children receive share proportionally. However, since funds distributed proportionally, effect priority can subtle — active accounts still receive share. Priority becomes apparent deposited amount small distribute among children. cases, full amount allocated child highest priority. 💡 account receives needs, extra refunded parent possibly redistributed.","code":"rent$change_status(\"active\")  # ensure rent is active #> Rent has become active . main$deposit(20000, channel = \"Equity Bank\") #> Withdrew: 20000 via Allocation to child accounts - Transaction ID: SYS5576EDC28E  #> Withdrew: 10000 via Allocation to child accounts - Transaction ID: SYS21858571C9  #> Due date extended. Number of periods unpaid: 3  #> Rent reactivated. Outstanding balance due: 9000  #> Deposited: 9000 via Allocation from Needs - Transaction ID: SYS6D03B4F8E6  #> Rent has become inactive . #> Extra amount of 1000 moved to Needs  #> Rent fully funded for 3 period(s) #> Deposited: 10000 via Allocation from Main - Transaction ID: SYS6D03B4F8E6  #> Deposited: 6000 via Allocation from Main - Transaction ID: SYS6D03B4F8E6  #> Deposited: 4000 via Allocation from Main - Transaction ID: SYS6D03B4F8E6  #> Deposited: 20000 via Equity Bank - Transaction ID: SYS6D03B4F8E6  rent$get_balance()      # Rent gets funds #> Current Balance: 15000 #> [1] 15000 needs$get_balance()     # Needs balance reflects leftover after rent #> Current Balance: 6000 #> [1] 6000 main$get_balance()      # Should be zero if all children are active #> Current Balance: 0 #> [1] 0 # set child priorities  needs$set_priority(3) #> Priority for Needs set to 3 savings$set_priority(2) #> Priority for Savings set to 2 debt$set_priority(1) #> Priority for Debt set to 1  # deposit money main$deposit(10000, channel = \"Equity Bank\",transaction_number = \"Trans1\") #> Withdrew: 10000 via Allocation to child accounts - Transaction ID: SYS97D0BC63F5 #> No active child accounts available. #> Deposited: 5000 via Allocation from Main - Transaction ID: Trans1  #> Deposited: 3000 via Allocation from Main - Transaction ID: Trans1  #> Deposited: 2000 via Allocation from Main - Transaction ID: Trans1  #> Deposited: 10000 via Equity Bank - Transaction ID: Trans1  # distributions order follows priority see timestamps  needstime=needs$transactions%>%filter(TransactionID==\"Trans1\") savingstime=savings$transactions%>%filter(TransactionID==\"Trans1\") debttime=debt$transactions%>%filter(TransactionID==\"Trans1\") sprintf(\"needs: %s\",needstime$Date) #> [1] \"needs: 2025-09-12 10:03:29.932099\" sprintf(\"savings: %s\",savingstime$Date) #> [1] \"savings: 2025-09-12 10:03:29.933617\" sprintf(\"debt: %s\",debttime$Date) #> [1] \"debt: 2025-09-12 10:03:29.93444\""},{"path":"/articles/account_lifecycle.html","id":"handling-tiny-refunds-and-preventing-cyclic-redistribution","dir":"Articles","previous_headings":"🔄 Account Lifecycle and Behavior","what":"🔄 Handling Tiny Refunds and Preventing Cyclic Redistribution","title":"Account Lifecycle and Behavior","text":"Since refunds returned parent account, treated regular deposits. ensures deposit checks validations apply uniformly. However, deposits trigger redistribution child accounts, can inadvertently lead cyclic loops, especially refunded amount small (e.g., 0.00001). prevent infinite allocation loops, amount less 0.10 redistributed among children. Instead, system deposits entire small amount highest-priority active child account. strategy maintains consistency avoiding unnecessary micro-redistribution.","code":"main$deposit(0.09, channel = \"ABSA\",transaction_number = \"Test: Small Allocation\") #> Amount too small to distribute. Depositing into the highest-priority child. #> Withdrew: 0.09 via Allocation to Needs - Transaction ID: SYS07D75461E9 #> No active child accounts available. #> Deposited: 0.09 via Allocation from Main - Transaction ID: Test: Small Allocation  #> Deposited: 0.09 via ABSA - Transaction ID: Test: Small Allocation"},{"path":"/articles/account_lifecycle.html","id":"summary","dir":"Articles","previous_headings":"","what":"✅ Summary","title":"Account Lifecycle and Behavior","text":"Accounts can nested, allocated funds, tracked independently. finman intelligently handles activation, deactivation, reallocation. Periodic obligations trigger reactivation, priorities determine allocation order. lifecycle ensures money flows ’s needed, without micromanaging every transaction. Next: Try tracking-obligations vignette dive deeper bills debts.","code":""},{"path":"/articles/account_lifecycle.html","id":"sponsors","dir":"Articles","previous_headings":"✅ Summary","what":"💖 Sponsors","title":"Account Lifecycle and Behavior","text":"Support work GitHub Sponsors!","code":""},{"path":"/articles/allocation_strategies.html","id":"income-allocation-strategies","dir":"Articles","previous_headings":"","what":"📊 Income Allocation Strategies","title":"Income Allocation Strategies","text":"vignette demonstrates finman lets build customized budgeting trees using real-world strategies — 50/30/20, handling high debt low income. system supports: Tiered budgeting (e.g., Needs → Rent, Food). Flexible allocation percentages. Passive vs. greedy allocation flows.","code":""},{"path":"/articles/allocation_strategies.html","id":"strategy-1-standard-503020-budget","dir":"Articles","previous_headings":"","what":"📁 Strategy 1: Standard 50/30/20 Budget","title":"Income Allocation Strategies","text":"strategy breaks income : 50% Needs – Rent, Food, Utilities. 30% Savings/Wants – Emergency Fund, Hobbies. 20% Debt – Loan payments, Credit cards.","code":"main <- MainAccount$new(\"Main\")  needs <- ChildAccount$new(\"Needs\", allocation = 0.5) savings <- ChildAccount$new(\"Savings\", allocation = 0.3) debt <- ChildAccount$new(\"Debt\", allocation = 0.2)  main$add_child_account(needs) main$add_child_account(savings) main$add_child_account(debt)  # Tier 3 accounts under Needs needs$add_child_account(GrandchildAccount$new(\"Rent\", fixed_amount = 8000, freq = 30, due_date = Sys.Date() + 7)) needs$add_child_account(GrandchildAccount$new(\"Food\", fixed_amount = 3000, freq = 30, due_date = Sys.Date() + 7))  # Under Savings savings$add_child_account(GrandchildAccount$new(\"Emergency Fund\", fixed_amount = 5000, freq = 30, due_date = Sys.Date() + 7))  # Under Debt debt$add_child_account(GrandchildAccount$new(\"Student Loan\", fixed_amount = 6000, freq = 30, due_date = Sys.Date() + 7))  # Fund the budget main$deposit(30000, channel = \"ABSA\") #> Withdrew: 30000 via Allocation to child accounts - Transaction ID: SYSD801B413E3 #> No active child accounts available. #> Deposited: 15000 via Allocation from Main - Transaction ID: SYS77DBA8FA78 #> No active child accounts available. #> Deposited: 9000 via Allocation from Main - Transaction ID: SYS77DBA8FA78 #> No active child accounts available. #> Deposited: 6000 via Allocation from Main - Transaction ID: SYS77DBA8FA78  #> Deposited: 30000 via ABSA - Transaction ID: SYS77DBA8FA78"},{"path":"/articles/allocation_strategies.html","id":"strategy-2-debt-heavy-budget","dir":"Articles","previous_headings":"","what":"⚠️ Strategy 2: Debt-Heavy Budget","title":"Income Allocation Strategies","text":"Users overwhelming debt might prioritize repayment: Allocate 40–60% Debt. Reduce Wants Savings. Pay defaulted overdue loans first.","code":"main <- MainAccount$new(\"Main\")  debt_recovery <- ChildAccount$new(\"Debt Recovery\", allocation = 0.5) needs <- ChildAccount$new(\"Needs\", allocation = 0.4) savings <- ChildAccount$new(\"Savings\", allocation = 0.1)  main$add_child_account(debt_recovery) main$add_child_account(needs) main$add_child_account(savings)  debt_recovery$add_child_account(GrandchildAccount$new(\"Defaulted Loan\", fixed_amount = 15000, freq = 30, due_date = Sys.Date())) debt_recovery$add_child_account(GrandchildAccount$new(\"Overdue Credit\", fixed_amount = 12000, freq = 30, due_date = Sys.Date()))"},{"path":"/articles/allocation_strategies.html","id":"strategy-3-high-income-low-need","dir":"Articles","previous_headings":"","what":"💼 Strategy 3: High-Income, Low-Need","title":"Income Allocation Strategies","text":"disposable income: Reduce Needs 30%. Boost long-term savings projects. Automatically fund goals like Retirement Land.","code":"main <- MainAccount$new(\"Main\")  main$add_child_account(ChildAccount$new(\"Needs\", allocation = 0.3)) main$add_child_account(ChildAccount$new(\"Savings\", allocation = 0.5)) main$add_child_account(ChildAccount$new(\"Wants\", allocation = 0.2))  # Add savings targets main$child_accounts$Savings$add_child_account(GrandchildAccount$new(\"Retirement\", fixed_amount = 8000, freq = 30, due_date = Sys.Date() + 30)) main$child_accounts$Savings$add_child_account(GrandchildAccount$new(\"Land Purchase\", fixed_amount = 10000, freq = 60, due_date = Sys.Date() + 60))"},{"path":"/articles/allocation_strategies.html","id":"strategy-4-low-income-high-obligation","dir":"Articles","previous_headings":"","what":"📉 Strategy 4: Low Income, High Obligation","title":"Income Allocation Strategies","text":"Focus allocation critical expenses. Postpone savings wants. Let optional accounts deactivate automatically.","code":"main <- MainAccount$new(\"Main\")  needs <- ChildAccount$new(\"Needs\", allocation = 0.9) savings <- ChildAccount$new(\"Savings\", allocation = 0.1) wants <- ChildAccount$new(\"Wants\", allocation = 0.0)  main$add_child_account(needs) main$add_child_account(savings) main$add_child_account(wants)  needs$add_child_account(GrandchildAccount$new(\"Rent\", fixed_amount = 7000, freq = 30, due_date = Sys.Date() + 5)) needs$add_child_account(GrandchildAccount$new(\"Food\", fixed_amount = 3000, freq = 30, due_date = Sys.Date() + 5))"},{"path":"/articles/allocation_strategies.html","id":"summary","dir":"Articles","previous_headings":"","what":"🧠 Summary","title":"Income Allocation Strategies","text":"🧹 can freely design hierarchy flexible allocation totals. Add/remove groups goals finances evolve.","code":""},{"path":"/articles/allocation_strategies.html","id":"sponsors","dir":"Articles","previous_headings":"","what":"💖 Sponsors","title":"Income Allocation Strategies","text":"Support work GitHub Sponsors!","code":""},{"path":"/articles/finman-overview.html","id":"what-is-finman","dir":"Articles","previous_headings":"","what":"📦 What is finman?","title":"finman-overview","text":"finman package powers logic Finance Manager system. defines core account types (Main, Child, Grandchild), allocation rules, transaction tracking, file-based persistence.","code":""},{"path":"/articles/finman-overview.html","id":"key-concepts","dir":"Articles","previous_headings":"","what":"🧠 Key Concepts","title":"finman-overview","text":"Account Hierarchy MainAccount: Receives income distributes . ChildAccount: Receives allocations may hold rules. GrandchildAccount: Tracks obligations (e.g., rent, school fees). Account Behavior Accounts deactivate fully funded. reactivate based periodic due dates. Loan accounts can pull funds automatically main account. Persistence Accounts states stored save_user_file() loaded using load_user_file().","code":""},{"path":"/articles/finman-overview.html","id":"creating-an-account-tree","dir":"Articles","previous_headings":"","what":"🚀 Creating an Account Tree","title":"finman-overview","text":"","code":"main <- MainAccount$new(\"Main\") needs <- ChildAccount$new(\"Needs\", allocation = 0.5) savings <- ChildAccount$new(\"Savings\", allocation = 0.3) debt <- ChildAccount$new(\"Debt\", allocation = 0.2)  main$add_child_account(needs) main$add_child_account(savings) main$add_child_account(debt)  rent <- GrandchildAccount$new(   \"Rent\", freq = 30, due_date = today() + 5, fixed_amount = 5000 ) needs$add_child_account(rent)"},{"path":"/articles/finman-overview.html","id":"allocation-and-transactions","dir":"Articles","previous_headings":"","what":"💸 Allocation and Transactions","title":"finman-overview","text":"Accounts can allocated funds several ways: Percentage Allocation Child grandchild accounts receive money parent based predefined percentages. Depositing parent triggers automatic distribution. Parent balances remain zero unless children fully funded. Direct Deposits Depositing directly lower-level account treated allocation account. Refunds child account receives needs, extra amount refunded parent. parent redistributes unless child accounts inactive. Example:","code":"# Deposit income (in other words allocate money to main account) main$deposit(20000, channel = \"ABSA\") #> Withdrew: 20000 via Allocation to child accounts - Transaction ID: SYS90BAE4526A #> No active child accounts available. #> Deposited: 10000 via Allocation from Main - Transaction ID: SYS7DD595B3D3  #> Deposited: 6000 via Allocation from Main - Transaction ID: SYS7DD595B3D3  #> Deposited: 4000 via Allocation from Main - Transaction ID: SYS7DD595B3D3  #> Deposited: 20000 via ABSA - Transaction ID: SYS7DD595B3D3"},{"path":"/articles/finman-overview.html","id":"viewing-allocation-results","dir":"Articles","previous_headings":"","what":"📊 Viewing Allocation Results","title":"finman-overview","text":"money trickled .","code":"# balance main$get_balance()              # balance in main account #> Current Balance: 0 #> [1] 0 needs$get_balance()             # balance in needs account #> Current Balance: 10000 #> [1] 10000 savings$get_balance()           # balance in savings account #> Current Balance: 6000 #> [1] 6000 debt$get_balance()              # balance in debt account #> Current Balance: 4000 #> [1] 4000 rent$get_balance()              # balance in rent account #> Current Balance: 0 #> [1] 0  # Total balance main$compute_total_balance()    # total balance in main account+its children #> [1] 20000                                 # this is literary the accumulated money in your                                 # bank account  needs$compute_total_balance()   # total balance in needs account+ its children #> [1] 10000                                 # what amount in your bank account is there to                                  # cover needs  savings$compute_total_balance()   # total balance in savings account+ its children #> [1] 6000                                   # what amount in your bank account is there to                                    # cover savings  debt$compute_total_balance()   # total balance in debt account+ its children #> [1] 4000                                   # what amount in your bank account is there to                                    # cover debt  rent$compute_total_balance()   # total balance in rent(it has no children) #> [1] 0                                # what amount in your bank account is there to                                 # cover rent (a sinking fund)                               # amount due  main$compute_total_due()        # Total amount of debt(current+longterm) #> [1] 5000  needs$compute_total_due()       # Total amount of debt from needs (current+longterm) #> [1] 5000  savings$compute_total_due()     # Total amount of debt from savings (current+longterm) #> [1] 0                                 # thes are unmet fixed savings etc.  rent$compute_total_due()     # Total amount of debt from rent (current+longterm) #> [1] 5000                              # this is what you need to pay from the sinking fund                              # for rent"},{"path":"/articles/finman-overview.html","id":"why-is-rents-balance-zero","dir":"Articles","previous_headings":"📊 Viewing Allocation Results","what":"❓ Why is Rent’s balance zero?","title":"finman-overview","text":"Answer: Rent account inactive. created, didn’t assign allocation percentage, defaulted zero. Accounts zero allocation considered inactive — tells system fund . Let’s fix :","code":"rent$status #> [1] \"inactive\" needs$set_child_allocation(\"Rent\", 0.5) #>  #> Child Accounts of Needs : #> - Rent rent$change_status(\"active\") #> Rent has become active ."},{"path":"/articles/finman-overview.html","id":"direct-deposits-to-grandchild-accounts","dir":"Articles","previous_headings":"","what":"💸 Direct Deposits to Grandchild Accounts","title":"finman-overview","text":"can also allocate funds depositing directly grandchild account. Since Rent now fully funded, becomes inactive stops drawing Needs. active siblings, receive future allocations. time, behavior self-corrects - -funding.","code":"rent$deposit(20000, channel = \"Barclays\") #> Deposited: 5000 via Barclays - Transaction ID: SYS25F83352BB  #> Rent has become inactive . #> Extra amount of 15000 moved to Needs  #> Rent fully funded for 1 period(s) rent$get_account_status() #> Rent is inactive #> [1] \"inactive\" # balance rent$get_balance()    # get rent balance #> Current Balance: 5000 #> [1] 5000 needs$get_balance()   # needs(parent) balance has increased by the refund amount #> Current Balance: 25000 #> [1] 25000  # overall balance needs$compute_total_balance()  # need account has more money #> [1] 30000 needs$compute_total_due()  # need total due has decreased #> [1] 0 main$compute_total_due()   # even on the whole tree there is decrease #> [1] 0                            # you have reduced total payable."},{"path":"/articles/finman-overview.html","id":"advanced-metrics","dir":"Articles","previous_headings":"","what":"📊 Advanced Metrics","title":"finman-overview","text":"Spending tracks actual payments (withdrawals).Allocated Amount total amount directed account descendants.Income Utilization shows much allocation spent. utilization 0%, means ’ve saved obligations haven’t actually spent money.","code":"main$allocated_amount() # total income allocated #> [1] 40000 main$spending()         # total spend #> [1] 0 main$income_utilization() # utilization of allocated amount? #> [1] 0  needs$allocated_amount() # total income allocated to needs #> [1] 30000 needs$spending()         # how much of the allocation is spend #> [1] 0 needs$income_utilization() # utilization level #> [1] 0   savings$allocated_amount() # total income allocated to savings #> [1] 6000 savings$spending()         # how much of the allocation is spend #> [1] 0 savings$income_utilization() # utilization level #> [1] 0  debt$allocated_amount() # total income allocated to debt #> [1] 4000 debt$spending()         # how much of the allocation is spend #> [1] 0 debt$income_utilization() # utilization level #> [1] 0"},{"path":"/articles/finman-overview.html","id":"spending-some-amount","dir":"Articles","previous_headings":"","what":"🧾 Spending Some Amount","title":"finman-overview","text":"Let’s simulate spending:","code":"rent$withdraw(5000,channel=\"ABSA\")      # paid rent #> Withdrew: 5000 via ABSA - Transaction ID: SYS89CEFAB7C6 savings$withdraw(6000,channel=\"ABSA\")   # withdraw to pay savings the specifics #> Withdrew: 6000 via ABSA - Transaction ID: SYSB3B14AA6A8                                         # Not known we can specify this by attaching                                         # which are the specific savings debt$withdraw(4000,channel=\"ABSA\")      # withdraw to pay savings the specifics #> Withdrew: 4000 via ABSA - Transaction ID: SYS3492CF4A15"},{"path":"/articles/finman-overview.html","id":"after-spending-utilization-analysis","dir":"Articles","previous_headings":"","what":"📉 After Spending: Utilization Analysis","title":"finman-overview","text":"Example interpretation: 37.5% utilization rate means 37.5% allocated funds actually used. rest remains idle. Needs, Rent defined — hence low utilization. may want define obligations reflect actual needs.","code":"main$allocated_amount() # total income allocated #> [1] 40000 main$spending()         # total spend #> [1] 15000 main$income_utilization() # utilization of allocated amount? #> [1] 0.375  needs$allocated_amount() # total income allocated to needs #> [1] 30000 needs$spending()         # how much of the allocation is spend #> [1] 5000 needs$income_utilization() # utilization level #> [1] 0.1666667   savings$allocated_amount() # total income allocated to savings #> [1] 6000 savings$spending()         # how much of the allocation is spend #> [1] 6000 savings$income_utilization() # utilization level #> [1] 1  debt$allocated_amount() # total income allocated to debt #> [1] 4000 debt$spending()         # how much of the allocation is spend #> [1] 4000 debt$income_utilization() # utilization level #> [1] 1"},{"path":"/articles/finman-overview.html","id":"advanced-usage","dir":"Articles","previous_headings":"","what":"🔄 Advanced Usage","title":"finman-overview","text":"Set obligation frequency: set_account_freq() Define fixed obligations: set_fixed_amount() Configure time periods: set_account_periods() Use with_account_lock() concurrency-safe operations","code":""},{"path":"/articles/finman-overview.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"📚 Next Steps","title":"finman-overview","text":"View API endpoints via Plumber API docs Try full interface Shiny App","code":""},{"path":"/articles/finman-overview.html","id":"sponsors","dir":"Articles","previous_headings":"📚 Next Steps","what":"💖 Sponsors","title":"finman-overview","text":"Support work GitHub Sponsors!","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Festus Nzuma. Author, maintainer.            statisticsguru1","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nzuma F (2025). finman: Finance Account Management. R package version 0.0.1, https://github.com/statisticsguru1/personal-finance-manager/tree/refactor-main-account-docs.","code":"@Manual{,   title = {finman: Finance Account Management},   author = {Festus Nzuma},   year = {2025},   note = {R package version 0.0.1},   url = {https://github.com/statisticsguru1/personal-finance-manager/tree/refactor-main-account-docs}, }"},{"path":"/index.html","id":"finman-","dir":"","previous_headings":"","what":"Finance Account Management","title":"Finance Account Management","text":"Finman package provides robust, extensible framework modeling personal group financial systems using hierarchical accounts. Built R6, supports object-oriented definitions accounts multiple levels — general-purpose wallets specialized savings debt accounts — flexible rules allocation, due tracking, status management.","code":""},{"path":"/index.html","id":"id_-overview","dir":"","previous_headings":"","what":"📦 Overview","title":"Finance Account Management","text":"Finman provides robust object-oriented structure (via R6) managing hierarchy financial accounts","code":""},{"path":"/index.html","id":"id_-what-it-does","dir":"","previous_headings":"📦 Overview","what":"🔧 What It Does","title":"Finance Account Management","text":"📁 Hierarchical Account Structure: MainAccount: Root account holds distributes funds. ChildAccount: Intermediate accounts customizable allocation prioritization. GrandchildAccount: Specialized accounts fixed dues (e.g., rent, internet) due dates periods. 🔄 Automatic Allocation & Balancing: Deposits flow account hierarchy based allocation percentages account status. Fully funded accounts become inactive, allowing surplus remain redirected. 🔒 Concurrency-Safe Modifications: Built-file locking avoid race conditions working shared API environments. 📈 Stateful Tracking: Balances, dues, fixed amounts, priorities, transaction history persistently stored per user. 🧱 Composable Architecture: package designed power backend broader financial management system including REST APIs (via Plumber) dashboards (Shiny/React).","code":""},{"path":"/index.html","id":"id_️-installation","dir":"","previous_headings":"","what":"🛠️ Installation","title":"Finance Account Management","text":"","code":"# Install devtools if not already installed install.packages(\"devtools\")  # Install the package from GitHub devtools::install_github(\"statisticsguru1/personal-finance-manager/finman\")"},{"path":"/index.html","id":"id_-getting-started","dir":"","previous_headings":"","what":"🚀 Getting Started","title":"Finance Account Management","text":"","code":"library(finman)  main <- MainAccount$new(name = \"Wallet\") child <- ChildAccount$new(name = \"Goals\", allocation = 0.5)  main$add_child(child) main$deposit(1000)  main$get_balance()   # 1000 child$get_balance()  # 500 (50% allocation)"},{"path":"/index.html","id":"id_-documentation","dir":"","previous_headings":"","what":"📚 Documentation","title":"Finance Account Management","text":"Visit full documentation site : ➡️ https://statisticsguru1.github.io/personal-finance-manager/","code":""},{"path":"/index.html","id":"developer-notes","dir":"","previous_headings":"","what":"Developer Notes","title":"Finance Account Management","text":"Modular R6 class definitions allow extend override behavior. logic pure R depend external DBs systems.","code":""},{"path":"/index.html","id":"id_-license","dir":"","previous_headings":"","what":"🔒 License","title":"Finance Account Management","text":"software licensed MIT basis. may : - Copy, redistribute, modify code - Use public commercial settings may: - View study code learning inspection 📧 request licensing use permissions, contact:mutindafestus27@gmail.com","code":""},{"path":"/index.html","id":"id_-author","dir":"","previous_headings":"","what":"👤 Author","title":"Finance Account Management","text":"Festus Nzuma 📬 GitHub Profile 📧 mutindafestus27@gmail.com","code":""},{"path":"/index.html","id":"id_-contributing","dir":"","previous_headings":"","what":"🤝 Contributing","title":"Finance Account Management","text":"package currently accepting public contributions. private collaboration inquiries, contact author.","code":""},{"path":"/index.html","id":"id_-repository-structure","dir":"","previous_headings":"","what":"📁 Repository Structure","title":"Finance Account Management","text":"","code":"personal-finance-manager/ ├── finman/           # R package logic ├── api/              # REST API endpoints (plumber) ├── tests/            # Unit tests ├── shinyapp/         # (future) Shiny frontend ├── reactapp/         # (future) React mobile frontend ├── .github/          # CI workflows ├── README.md └── LICENSE"},{"path":"/index.html","id":"id_-roadmap","dir":"","previous_headings":"","what":"🏁 Roadmap","title":"Finance Account Management","text":"Core account logic. API development. Load testing. Shiny frontend integration. React frontend integration.","code":""},{"path":"/index.html","id":"id_-sponsors","dir":"","previous_headings":"","what":"💖 Sponsors","title":"Finance Account Management","text":"Support work GitHub Sponsors!","code":""},{"path":"/reference/ChildAccount.html","id":null,"dir":"Reference","previous_headings":"","what":"ChildAccount Class — ChildAccount","title":"ChildAccount Class — ChildAccount","text":"extension MainAccount class used model specialized sub-accounts goals, needs, debt repayment accounts. Child accounts inherit core functionality MainAccount adding features like allocation percentage, account status, priority levels fund distribution.","code":""},{"path":"/reference/ChildAccount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ChildAccount Class — ChildAccount","text":"Inherits MainAccount. Can part parent account participate fund distribution. Tracks balance, transaction history, priority    receiving funds.","code":""},{"path":"/reference/ChildAccount.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ChildAccount Class — ChildAccount","text":"initialize(name, allocation, status, parent, path,   priority) Constructor method. deposit(amount, transaction_number, , channel, transaction_date) Overridden deposit method status check. change_status(status) Updates status account. get_account_status() Returns prints account's status. get_priority() Returns priority level account. set_priority(priority) Sets new priority level.","code":""},{"path":[]},{"path":"/reference/ChildAccount.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"ChildAccount Class — ChildAccount","text":"finman::MainAccount -> ChildAccount","code":""},{"path":"/reference/ChildAccount.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ChildAccount Class — ChildAccount","text":"allocation Numeric. Share distributed income (0-1 scale). status Character. Indicates whether account \"active\" \"closed\". parent Optional. Reference parent account (hierarchical). path Character. Logical path account (used organizing accounts). priority Numeric. Determines order distribution among children (higher = ).","code":""},{"path":"/reference/ChildAccount.html","id":"methods-1","dir":"Reference","previous_headings":"","what":"Methods","title":"ChildAccount Class — ChildAccount","text":"finman::MainAccount$add_child_account() finman::MainAccount$allocated_amount() finman::MainAccount$compute_total_balance() finman::MainAccount$compute_total_due() finman::MainAccount$compute_total_due_within_n_days() finman::MainAccount$distribute_to_children() finman::MainAccount$find_account() finman::MainAccount$find_account_by_uuid() finman::MainAccount$generate_transaction_id() finman::MainAccount$get_balance() finman::MainAccount$get_transactions() finman::MainAccount$income_utilization() finman::MainAccount$is_duplicate_transaction() finman::MainAccount$list_all_accounts() finman::MainAccount$list_child_accounts() finman::MainAccount$move_balance() finman::MainAccount$set_child_allocation() finman::MainAccount$spending() finman::MainAccount$total_income() finman::MainAccount$walking_amount() finman::MainAccount$withdraw()","code":""},{"path":"/reference/ChildAccount.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ChildAccount Class — ChildAccount","text":"ChildAccount$new() ChildAccount$deposit() ChildAccount$change_status() ChildAccount$get_account_status() ChildAccount$get_priority() ChildAccount$set_priority() ChildAccount$clone()","code":""},{"path":"/reference/ChildAccount.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ChildAccount Class — ChildAccount","text":"Initializes new ChildAccount object setting name, allocation, status, parent, path, priority. Inherits initialization logic MainAccount class.","code":""},{"path":"/reference/ChildAccount.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChildAccount Class — ChildAccount","text":"","code":"ChildAccount$new(   name,   allocation = 0,   status = \"active\",   parent = NULL,   path = NULL,   priority = 0 )"},{"path":"/reference/ChildAccount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChildAccount Class — ChildAccount","text":"name Character. name child account. allocation Numeric. Allocation weight distributing funds (default 0). status Character. Status account: \"active\", \"inactive\", \"closed\" (default \"active\"). parent MainAccount NULL. Optional parent account reference. path Character NULL. Path label identify account lineage. priority Numeric. Priority value used distributing small amounts (default 0).","code":""},{"path":"/reference/ChildAccount.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChildAccount Class — ChildAccount","text":"","code":"# Create a basic ChildAccount with default values acc <- ChildAccount$new(name = \"Emergency Fund\")  # Create a ChildAccount with custom allocation and priority acc2 <- ChildAccount$new(   name = \"Education\",   allocation = 0.3,   status = \"active\",   path = \"main_account/education\",   priority = 2 )  # View the account status acc2$get_account_status()"},{"path":"/reference/ChildAccount.html","id":"method-deposit-","dir":"Reference","previous_headings":"","what":"Method deposit()","title":"ChildAccount Class — ChildAccount","text":"Deposits funds ChildAccount account active. Records transaction, updates balance, distributes funds nested child accounts, applicable.","code":""},{"path":"/reference/ChildAccount.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ChildAccount Class — ChildAccount","text":"","code":"ChildAccount$deposit(   amount,   transaction_number = NULL,   by = \"User\",   channel = NULL,   transaction_date = Sys.time() )"},{"path":"/reference/ChildAccount.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChildAccount Class — ChildAccount","text":"amount Numeric. Amount money deposit. Must greater 0. transaction_number Character NULL. Optional transaction ID. NULL, ID generated automatically. Character. Identifier made deposit (default \"User\"). channel Character NULL. Channel deposit made (e.g., \"Mobile\", \"Bank\"). transaction_date POSIXct. Timestamp transaction (default current time).","code":""},{"path":"/reference/ChildAccount.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"ChildAccount Class — ChildAccount","text":"method overrides deposit() method MainAccount class. includes status check ensure account active proceeding. account inactive closed, deposit blocked message printed.","code":""},{"path":"/reference/ChildAccount.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ChildAccount Class — ChildAccount","text":"return value. Updates account state prints summary.","code":""},{"path":"/reference/ChildAccount.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"ChildAccount Class — ChildAccount","text":"","code":"# Create an active child account acc <- ChildAccount$new(name = \"Savings\", allocation = 0.5)  # Deposit funds into the account acc$deposit(amount = 100, channel = \"Mobile\")  # Attempting to deposit into an inactive account acc$change_status(\"inactive\") acc$deposit(amount = 50, channel = \"Mobile\")  # Will not proceed"},{"path":"/reference/ChildAccount.html","id":"method-change-status-","dir":"Reference","previous_headings":"","what":"Method change_status()","title":"ChildAccount Class — ChildAccount","text":"Changes status ChildAccount. new status \"closed\", account must zero balance; otherwise, error thrown.","code":""},{"path":"/reference/ChildAccount.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ChildAccount Class — ChildAccount","text":"","code":"ChildAccount$change_status(status)"},{"path":"/reference/ChildAccount.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChildAccount Class — ChildAccount","text":"status Character. desired new status account. Acceptable values include \"active\", \"inactive\", \"closed\".","code":""},{"path":"/reference/ChildAccount.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"ChildAccount Class — ChildAccount","text":"account already \"closed\", message printed changes made. closing requested balance zero, error raised ensure proper fund handling deactivation.","code":""},{"path":"/reference/ChildAccount.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"ChildAccount Class — ChildAccount","text":"return value. Modifies account's status place prints message.","code":""},{"path":"/reference/ChildAccount.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"ChildAccount Class — ChildAccount","text":"","code":"acc <- ChildAccount$new(name = \"Emergency Fund\", allocation = 0.3) acc$change_status(\"inactive\")  # Changes status to inactive acc$change_status(\"active\")    # Re-activates the account  # Attempting to close with non-zero balance triggers error acc$deposit(100, channel = \"Mobile\") \\dontrun{ acc$change_status(\"closed\")    # Will raise an error }  # Withdraw funds then close acc$withdraw(100, channel = \"Transfer\") acc$change_status(\"closed\")    # Successful closure"},{"path":"/reference/ChildAccount.html","id":"method-get-account-status-","dir":"Reference","previous_headings":"","what":"Method get_account_status()","title":"ChildAccount Class — ChildAccount","text":"Retrieves prints current status child account.","code":""},{"path":"/reference/ChildAccount.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ChildAccount Class — ChildAccount","text":"","code":"ChildAccount$get_account_status()"},{"path":"/reference/ChildAccount.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"ChildAccount Class — ChildAccount","text":"Character. current status account: typically \"active\", \"inactive\", \"closed\".","code":""},{"path":"/reference/ChildAccount.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"ChildAccount Class — ChildAccount","text":"","code":"acc <- ChildAccount$new(name = \"School Fees\", allocation = 0.4) acc$get_account_status() # Output: \"School Fees is active\""},{"path":"/reference/ChildAccount.html","id":"method-get-priority-","dir":"Reference","previous_headings":"","what":"Method get_priority()","title":"ChildAccount Class — ChildAccount","text":"Returns current priority level assigned child account.","code":""},{"path":"/reference/ChildAccount.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"ChildAccount Class — ChildAccount","text":"","code":"ChildAccount$get_priority()"},{"path":"/reference/ChildAccount.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"ChildAccount Class — ChildAccount","text":"Numeric. priority value used fund distribution (higher values indicate higher priority).","code":""},{"path":"/reference/ChildAccount.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"ChildAccount Class — ChildAccount","text":"","code":"acc <- ChildAccount$new(name = \"Emergency Fund\", priority = 3) acc$get_priority() # [1] 3"},{"path":"/reference/ChildAccount.html","id":"method-set-priority-","dir":"Reference","previous_headings":"","what":"Method set_priority()","title":"ChildAccount Class — ChildAccount","text":"Updates priority level child account. Higher priority values indicate stronger preference receiving funds distribution.","code":""},{"path":"/reference/ChildAccount.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"ChildAccount Class — ChildAccount","text":"","code":"ChildAccount$set_priority(priority)"},{"path":"/reference/ChildAccount.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChildAccount Class — ChildAccount","text":"priority Numeric. new priority value assign account.","code":""},{"path":"/reference/ChildAccount.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"ChildAccount Class — ChildAccount","text":"return value. Prints message confirming new priority.","code":""},{"path":"/reference/ChildAccount.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"ChildAccount Class — ChildAccount","text":"","code":"acc <- ChildAccount$new(name = \"Education Fund\", priority = 1) acc$set_priority(5) # Priority for Education Fund set to 5"},{"path":"/reference/ChildAccount.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ChildAccount Class — ChildAccount","text":"objects class cloneable method.","code":""},{"path":"/reference/ChildAccount.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"ChildAccount Class — ChildAccount","text":"","code":"ChildAccount$clone(deep = FALSE)"},{"path":"/reference/ChildAccount.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChildAccount Class — ChildAccount","text":"deep Whether make deep clone.","code":""},{"path":"/reference/ChildAccount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChildAccount Class — ChildAccount","text":"","code":"library(R6) library(uuid) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.2 #> ✔ ggplot2   3.5.2     ✔ tibble    3.3.0 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.1.0      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors # Create a basic ChildAccount instance child <- ChildAccount$new(   name = \"Emergency Fund\",   allocation = 0.3,   priority = 2 )  # Check initial status and priority child$get_account_status() #> Emergency Fund is active  #> [1] \"active\" child$get_priority() #> [1] 2  # Deposit into the child account child$deposit(   amount = 1000,   channel = \"Bank Transfer\" ) #> Deposited: 1000 via Bank Transfer - Transaction ID: SYSCDBED17A46   # Change account status to inactive child$change_status(\"inactive\") #> Emergency Fund has become inactive .  # Try another deposit (won't proceed if inactive) child$deposit(   amount = 500,   channel = \"Bank Transfer\" ) #> Deposit not allowed. Account is not active.  # Close the account after setting balance to zero child$withdraw(   amount = child$balance,   channel = \"Transfer to Main\" ) #> Withdrew: 1000 via Transfer to Main - Transaction ID: SYSEBC598EB8B  child$change_status(\"closed\") #> Emergency Fund has been closed.   ## ------------------------------------------------ ## Method `ChildAccount$new` ## ------------------------------------------------  # Create a basic ChildAccount with default values acc <- ChildAccount$new(name = \"Emergency Fund\")  # Create a ChildAccount with custom allocation and priority acc2 <- ChildAccount$new(   name = \"Education\",   allocation = 0.3,   status = \"active\",   path = \"main_account/education\",   priority = 2 )  # View the account status acc2$get_account_status() #> Education is active  #> [1] \"active\"  ## ------------------------------------------------ ## Method `ChildAccount$deposit` ## ------------------------------------------------  # Create an active child account acc <- ChildAccount$new(name = \"Savings\", allocation = 0.5)  # Deposit funds into the account acc$deposit(amount = 100, channel = \"Mobile\") #> Deposited: 100 via Mobile - Transaction ID: SYSBDBD29271A   # Attempting to deposit into an inactive account acc$change_status(\"inactive\") #> Savings has become inactive . acc$deposit(amount = 50, channel = \"Mobile\")  # Will not proceed #> Deposit not allowed. Account is not active.  ## ------------------------------------------------ ## Method `ChildAccount$change_status` ## ------------------------------------------------  acc <- ChildAccount$new(name = \"Emergency Fund\", allocation = 0.3) acc$change_status(\"inactive\")  # Changes status to inactive #> Emergency Fund has become inactive . acc$change_status(\"active\")    # Re-activates the account #> Emergency Fund has become active .  # Attempting to close with non-zero balance triggers error acc$deposit(100, channel = \"Mobile\") #> Deposited: 100 via Mobile - Transaction ID: SYSB207E9AC23  if (FALSE) { # \\dontrun{ acc$change_status(\"closed\")    # Will raise an error } # }  # Withdraw funds then close acc$withdraw(100, channel = \"Transfer\") #> Withdrew: 100 via Transfer - Transaction ID: SYSDCE97D6230  acc$change_status(\"closed\")    # Successful closure #> Emergency Fund has been closed.  ## ------------------------------------------------ ## Method `ChildAccount$get_account_status` ## ------------------------------------------------  acc <- ChildAccount$new(name = \"School Fees\", allocation = 0.4) acc$get_account_status() #> School Fees is active  #> [1] \"active\" # Output: \"School Fees is active\"  ## ------------------------------------------------ ## Method `ChildAccount$get_priority` ## ------------------------------------------------  acc <- ChildAccount$new(name = \"Emergency Fund\", priority = 3) acc$get_priority() #> [1] 3 # [1] 3  ## ------------------------------------------------ ## Method `ChildAccount$set_priority` ## ------------------------------------------------  acc <- ChildAccount$new(name = \"Education Fund\", priority = 1) acc$set_priority(5) #> Priority for Education Fund set to 5  # Priority for Education Fund set to 5"},{"path":"/reference/GrandchildAccount.html","id":null,"dir":"Reference","previous_headings":"","what":"GrandAccount Class — GrandchildAccount","title":"GrandAccount Class — GrandchildAccount","text":"Extends ChildAccount model low-level accounts bills, loans, targeted savings. Adds time-based logic, due tracking, automatic closure/reactivation ensure intelligent fund allocation.","code":""},{"path":"/reference/GrandchildAccount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"class introduces behavior tailored two main categories: 1. Periodic Accounts (e.g., Bills, Rent, Fixed Savings): Require recurring payments due_date. fully funded due date, account marked   \"inactive\" surplus returned parent. Upon reaching next due date, account reactivates   begins tracking next cycle's funding needs. 2. Open-Ended Accounts (e.g., Long-Term Debts, Target Savings): rely due_date cycles. fixed_amount target met, account   permanently closed surplus funds redirected. prevents -allocation already satisfied targets. behaviors: Guard poor user allocation strategies reallocating   excess funds fully funded accounts. Adapt automatically variable incomes, ensuring flexible   prioritization (e.g., freelancers). Allow non-expert users benefit dynamic, self-adjusting   savings debt repayment logic time.","code":""},{"path":"/reference/GrandchildAccount.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"GrandAccount Class — GrandchildAccount","text":"initialize(...) Constructor. Sets allocation, type, due date, fixed target, etc. deposit(...) Handles reactivation due date closes account target met.     Returns surplus parent account redistribution. withdraw(...) Withdraws funds adjusts period tracking accordingly. get_/set_ methods Get/set values due date, amount, account type, freq, periods.","code":""},{"path":[]},{"path":"/reference/GrandchildAccount.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"GrandAccount Class — GrandchildAccount","text":"finman::MainAccount -> finman::ChildAccount -> GrandchildAccount","code":""},{"path":"/reference/GrandchildAccount.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"GrandAccount Class — GrandchildAccount","text":"status Character. \"active\", \"inactive\", \"closed\". due_date POSIXct NULL. funding due (bills, etc.). amount_due Numeric. Amount left fully fund account. fixed_amount Numeric. Fixed target funding cycle. account_type Character. e.g., \"Bill\", \"Debt\", \"FixedSaving\". freq Numeric NULL. Cycle length days (recurring accounts). num_periods Numeric. Number unpaid cycles. Track_dues_and_balance Data frame. History balance dues.","code":""},{"path":"/reference/GrandchildAccount.html","id":"methods-1","dir":"Reference","previous_headings":"","what":"Methods","title":"GrandAccount Class — GrandchildAccount","text":"finman::MainAccount$add_child_account() finman::MainAccount$allocated_amount() finman::MainAccount$compute_total_balance() finman::MainAccount$compute_total_due() finman::MainAccount$compute_total_due_within_n_days() finman::MainAccount$distribute_to_children() finman::MainAccount$find_account() finman::MainAccount$find_account_by_uuid() finman::MainAccount$generate_transaction_id() finman::MainAccount$get_balance() finman::MainAccount$get_transactions() finman::MainAccount$income_utilization() finman::MainAccount$is_duplicate_transaction() finman::MainAccount$list_all_accounts() finman::MainAccount$list_child_accounts() finman::MainAccount$move_balance() finman::MainAccount$set_child_allocation() finman::MainAccount$spending() finman::MainAccount$total_income() finman::MainAccount$walking_amount() finman::ChildAccount$change_status() finman::ChildAccount$get_account_status() finman::ChildAccount$get_priority() finman::ChildAccount$set_priority()","code":""},{"path":"/reference/GrandchildAccount.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GrandAccount Class — GrandchildAccount","text":"GrandchildAccount$new() GrandchildAccount$get_due_date() GrandchildAccount$set_due_date() GrandchildAccount$get_fixed_amount() GrandchildAccount$set_fixed_amount() GrandchildAccount$get_account_type() GrandchildAccount$set_account_type() GrandchildAccount$deposit() GrandchildAccount$withdraw() GrandchildAccount$get_account_freq() GrandchildAccount$set_account_freq() GrandchildAccount$get_account_periods() GrandchildAccount$set_account_periods() GrandchildAccount$clone()","code":""},{"path":"/reference/GrandchildAccount.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GrandAccount Class — GrandchildAccount","text":"Initializes new GrandchildAccount instance attributes tracking suitable periodic (e.g., bills, rent, fixed savings) open-ended (e.g., long-term debts, target savings) accounts. Inherits ChildAccount sets account-specific parameters like due dates, target amounts, funding cycles.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$new(   name,   allocation = 0,   priority = 0,   fixed_amount = 0,   due_date = NULL,   account_type = \"Expense\",   freq = NULL,   status = \"active\" )"},{"path":"/reference/GrandchildAccount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"name Character. Name label account (e.g., \"Rent\", \"Car Loan\"). allocation Numeric. Proportion parent funds allocate account. Used distribution logic. Defaults 0. priority Numeric. Priority weight redistribution residual funds, especially cases overflow unmet allocations. Defaults 0. fixed_amount Numeric. Target amount required fully fund account per period total. Used bills savings goals. due_date POSIXct NULL. Optional due date indicating next funding cycle expected (recurring accounts). account_type Character. Type account: e.g., \"Bill\", \"Debt\", \"FixedSaving\", \"Expense\". Influences reactivation closure behavior. Defaults \"Expense\". freq Numeric NULL. Frequency days periodic accounts recur. Required automated reactivation logic. status Character. \"active\", \"inactive\", \"closed\".","code":""},{"path":"/reference/GrandchildAccount.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"constructor also initializes data frame Track_dues_and_balance monitor account's funding status time. row logs current due amount balance upon deposit withdrawal. accounts type \"Bill\", \"FixedSaving\", \"Debt\" (due_date), constructor sets fields support  automated activation, deactivation, fund tracking per cycle.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"# Initialize a rent account due every 30 days with a fixed monthly cost library(R6) library(uuid) library(tidyverse) rent <- GrandchildAccount$new(   name = \"Rent\",   allocation = 0.3,   priority = 2,   fixed_amount = 75000,   due_date = Sys.Date() + 30,   account_type = \"Bill\",   freq = 30 )  # Initialize a target savings account without a due date car_saving <- GrandchildAccount$new(   name = \"Car Fund\",   allocation = 0.2,   fixed_amount = 500000,   account_type = \"FixedSaving\" )"},{"path":"/reference/GrandchildAccount.html","id":"method-get-due-date-","dir":"Reference","previous_headings":"","what":"Method get_due_date()","title":"GrandAccount Class — GrandchildAccount","text":"Retrieves current due date account. typically used periodic accounts bills fixed savings require funding recurring schedule.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$get_due_date()"},{"path":"/reference/GrandchildAccount.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"POSIXct object representing due date, NULL due date set.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"rent <- GrandchildAccount$new(   name = \"Rent\",   fixed_amount = 75000,   due_date = Sys.Date() + 30 ) rent$get_due_date()"},{"path":"/reference/GrandchildAccount.html","id":"method-set-due-date-","dir":"Reference","previous_headings":"","what":"Method set_due_date()","title":"GrandAccount Class — GrandchildAccount","text":"Sets new due date account. useful accounts periodic funding requirements, rent, bills, fixed savings.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$set_due_date(due_date)"},{"path":"/reference/GrandchildAccount.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"due_date POSIXct. new due date assign account.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"None. Updates account's due_date field prints confirmation message.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"bill <- GrandchildAccount$new(name = \"Electricity\", fixed_amount = 5000) bill$set_due_date(Sys.Date() + 15)"},{"path":"/reference/GrandchildAccount.html","id":"method-get-fixed-amount-","dir":"Reference","previous_headings":"","what":"Method get_fixed_amount()","title":"GrandAccount Class — GrandchildAccount","text":"Retrieves fixed amount assigned account. typically used accounts like bills, fixed savings, loan payments specific amount expected periodically.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$get_fixed_amount()"},{"path":"/reference/GrandchildAccount.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"Numeric. fixed amount required account.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 75000) rent$get_fixed_amount() #> [1] 75000"},{"path":"/reference/GrandchildAccount.html","id":"method-set-fixed-amount-","dir":"Reference","previous_headings":"","what":"Method set_fixed_amount()","title":"GrandAccount Class — GrandchildAccount","text":"Sets new fixed amount account. value represents expected periodic contribution payment (e.g., monthly rent, loan installment). also recalculates current amount due based number unpaid periods account balance.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$set_fixed_amount(fixed_amount)"},{"path":"/reference/GrandchildAccount.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"fixed_amount Numeric. new fixed amount assigned account.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"None. Updates internal fields prints confirmation message.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 50000) rent$set_fixed_amount(75000) #> Fixed amount for Rent set to 75000"},{"path":"/reference/GrandchildAccount.html","id":"method-get-account-type-","dir":"Reference","previous_headings":"","what":"Method get_account_type()","title":"GrandAccount Class — GrandchildAccount","text":"Sets new fixed amount account. value represents expected periodic contribution payment (e.g., monthly rent, loan installment). also recalculates current amount due based number unpaid periods account balance.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$get_account_type()"},{"path":"/reference/GrandchildAccount.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"fixed_amount Numeric. new fixed amount assigned account.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"None. Updates internal fields prints confirmation message.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 50000) rent$set_fixed_amount(75000) #> Fixed amount for Rent set to 75000"},{"path":"/reference/GrandchildAccount.html","id":"method-set-account-type-","dir":"Reference","previous_headings":"","what":"Method set_account_type()","title":"GrandAccount Class — GrandchildAccount","text":"Sets type account, influences behaves respect funding, reactivation, closure policies. field central determining whether account recurring, fixed, target-based.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$set_account_type(account_type)"},{"path":"/reference/GrandchildAccount.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"account_type Character. One supported types \"Bill\", \"Debt\", \"FixedSaving\", \"NonFixedSaving\", \"Expense\". Determines due dates, funding limits, surplus reallocation handled.","code":""},{"path":"/reference/GrandchildAccount.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"- \"Bill\" \"FixedSaving\": accounts period-based   reactivated upon due dates. - \"Debt\" target savings: fully funded, closed   reopened. - \"Expense\" \"NonFixedSaving\": enforce due dates strict funding targets.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"None. Sets account_type field prints confirmation.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 75000) rent$set_account_type(\"Bill\") #> Account type for Rent set to Bill"},{"path":"/reference/GrandchildAccount.html","id":"method-deposit-","dir":"Reference","previous_headings":"","what":"Method deposit()","title":"GrandAccount Class — GrandchildAccount","text":"Handles incoming deposits grandchild accounts, including complex behavior fixed-amount accounts Bills, FixedSavings, Debts. intelligently manages due dates, period increments, surplus reallocation, account status updates.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$deposit(   amount,   transaction_number = NULL,   by = \"User\",   channel = NULL,   transaction_date = Sys.time() )"},{"path":"/reference/GrandchildAccount.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"amount Numeric. amount money deposited account. transaction_number Character NULL. Optional unique identifier transaction. NULL, new one generated. Character. party initiating transaction (default \"User\"). channel Character NULL. method channel used transaction (e.g., \"Mobile Money\"). transaction_date POSIXct. timestamp transaction (defaults current system time).","code":""},{"path":"/reference/GrandchildAccount.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"method supports two core behaviors depending type account: ## 1. Period-based Accounts (`Bill`, `FixedSaving`) - due date passed, system automatically increments number unpaid periods   extends due date. - deposited amount fully covers required amount across unpaid periods, account marked `\"inactive\"` (temporarily closed). - surplus redirected parent account reallocation, ensuring money trapped overfunded accounts. - transaction logged `Track_dues_and_balance` track financial health time. ## 2. Non-period Accounts (`LongTermDebt`, `TargetSaving`) - required amount met, account permanently closed, reactivate.  design ensures funds focused accounts still need   attention. mechanism encourages automatic reallocation excess funds critical needs without requiring users micromanage allocations — useful especially users fluctuating income.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"None. Internally updates account status, balance, due amounts, transaction history.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"# main account main<- MainAccount$new(\"main\")  # child account child <- ChildAccount$new(   name = \"Emergency Fund\",   allocation = 0.3,   priority = 2 )  # Grand child account bill <- GrandchildAccount$new(   name = \"Rent\",   fixed_amount = 75000,   account_type = \"Bill\",   due_date = Sys.Date(),   freq = 30 ) # attach grand child to parent main$add_child_account(child) child$add_child_account(bill) bill$deposit(75000,channel=\"ABSA\")  # Example with surplus being returned to parent: bill$deposit(80000,channel=\"ABSA\")  # Example with underpayment: bill$deposit(20000,channel=\"ABSA\")  # Remains active, shows updated due"},{"path":"/reference/GrandchildAccount.html","id":"method-withdraw-","dir":"Reference","previous_headings":"","what":"Method withdraw()","title":"GrandAccount Class — GrandchildAccount","text":"Handles withdrawal requests grandchild account. method ensures sufficient balance available, updates internal transaction tracking, compensates partial withdrawals fixed-amount accounts adjusting effective number periods.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$withdraw(   amount,   transaction_number = NULL,   by = \"User\",   channel = NULL,   transaction_date = Sys.time() )"},{"path":"/reference/GrandchildAccount.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"amount Numeric. amount withdraw account. transaction_number Character NULL. Optional transaction reference ID. Character. party initiating withdrawal (default \"User\"). channel Character NULL. Source medium transaction (e.g., \"Mobile Money\"). transaction_date POSIXct. date time withdrawal (default current system time).","code":""},{"path":"/reference/GrandchildAccount.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"method performs following steps: - Checks whether account balance sufficient requested withdrawal. - sufficient, processes withdrawal via parent class method. - logs updated balance remaining amount due `Track_dues_and_balance` history. accounts `fixed_amount` (e.g., Bills, FixedSavings, Debts): - Partial withdrawals treated funding reversals reduce number fulfilled periods. - ensures system maintains accurate state left fulfill account,   without modifying `fixed_amount` . mechanism crucial dynamic environments users may occasionally retrieve money priority accounts — e.g., emergencies — helps system readjust allocation logic accordingly.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"None. internal state account (balance, period count, logs) updated.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"# Withdraw a partial amount from a fully funded rent account rent <- GrandchildAccount$new(\"Rent\", fixed_amount = 75000, account_type = \"Bill\") rent$deposit(75000,channel=\"ABSA\") # Now equivalent to 0.53 of the rent period remaining. rent$withdraw(35000,channel=\"ABSA\")"},{"path":"/reference/GrandchildAccount.html","id":"method-get-account-freq-","dir":"Reference","previous_headings":"","what":"Method get_account_freq()","title":"GrandAccount Class — GrandchildAccount","text":"Retrieves recurrence frequency account, typically used accounts periodic obligations bills, fixed savings, loans.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$get_account_freq()"},{"path":"/reference/GrandchildAccount.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"frequency determines often account expects funding. instance, rent account monthly cycle frequency 30 (days), weekly expense might 7. field primarily used due date updates period tracking, especially auto-reactivating accounts like Bills Fixed Savings due dates lapse.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"frequency recurrence, stored account (e.g., number days, character label like \"monthly\").","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"acc <- GrandchildAccount$new(   \"Rent\",   fixed_amount = 1000,   freq = 30 ) acc$get_account_freq() # [1] 30"},{"path":"/reference/GrandchildAccount.html","id":"method-set-account-freq-","dir":"Reference","previous_headings":"","what":"Method set_account_freq()","title":"GrandAccount Class — GrandchildAccount","text":"Sets recurrence frequency account, defines often account expects funded.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$set_account_freq(account_freq)"},{"path":"/reference/GrandchildAccount.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"account_freq Numeric character value representing recurrence frequency. example, use `30` monthly bill `\"weekly\"` implementing custom handler.","code":""},{"path":"/reference/GrandchildAccount.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"frequency value crucial managing due dates determining new period starts (e.g., rent account reactivate month).used conjunction due date trigger reactivation allocation adjustments fixed-type accounts Bills, Fixed Savings, Loans. Changing frequency may affect missed overdue periods computed going forward.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"acc <- GrandchildAccount$new(\"Water Bill\", fixed_amount = 500) acc$set_account_freq(30) # Frequency for Water Bill set to 30"},{"path":"/reference/GrandchildAccount.html","id":"method-get-account-periods-","dir":"Reference","previous_headings":"","what":"Method get_account_periods()","title":"GrandAccount Class — GrandchildAccount","text":"Retrieves number unpaid active periods associated account.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$get_account_periods()"},{"path":"/reference/GrandchildAccount.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"particularly relevant fixed-type accounts like Bills, Fixed Savings, Debts defined frequency. number periods (`num_periods`) represents many cycles passed without full funding. increases due dates pass without adequate deposits decreases partial withdrawals made already-funded periods. example, rent account expects funding every 30 days misses two cycles, `num_periods` 3 (including current one), system attempt fund missed cycles.","code":""},{"path":"/reference/GrandchildAccount.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"GrandAccount Class — GrandchildAccount","text":"Numeric value indicating many periods currently pending tracked account.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"acc <- GrandchildAccount$new(   \"Internet Bill\",   fixed_amount = 2500,   freq = 30  ) acc$get_account_periods() # [1] 1"},{"path":"/reference/GrandchildAccount.html","id":"method-set-account-periods-","dir":"Reference","previous_headings":"","what":"Method set_account_periods()","title":"GrandAccount Class — GrandchildAccount","text":"Manually sets number unpaid active periods account.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$set_account_periods(periods)"},{"path":"/reference/GrandchildAccount.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"periods Numeric value representing number periods assign.","code":""},{"path":"/reference/GrandchildAccount.html","id":"details-8","dir":"Reference","previous_headings":"","what":"Details","title":"GrandAccount Class — GrandchildAccount","text":"method allows manual control many cycles (e.g., months days) currently due tracked account. can used administrative corrections simulations time passage budgeting models. Use caution: setting `num_periods` directly may desynchronize actual due date logic unless adjustments consistently maintained.","code":""},{"path":"/reference/GrandchildAccount.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"acc <- GrandchildAccount$new(\"Loan Payment\", fixed_amount = 10000, freq = 30) acc$set_account_periods(3) # Output: Loan Payment has 3 period(s)"},{"path":"/reference/GrandchildAccount.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"GrandAccount Class — GrandchildAccount","text":"objects class cloneable method.","code":""},{"path":"/reference/GrandchildAccount.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"GrandAccount Class — GrandchildAccount","text":"","code":"GrandchildAccount$clone(deep = FALSE)"},{"path":"/reference/GrandchildAccount.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"GrandAccount Class — GrandchildAccount","text":"deep Whether make deep clone.","code":""},{"path":"/reference/GrandchildAccount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GrandAccount Class — GrandchildAccount","text":"","code":"## ------------------------------------------------ ## Method `GrandchildAccount$new` ## ------------------------------------------------  # Initialize a rent account due every 30 days with a fixed monthly cost library(R6) library(uuid) library(tidyverse) rent <- GrandchildAccount$new(   name = \"Rent\",   allocation = 0.3,   priority = 2,   fixed_amount = 75000,   due_date = Sys.Date() + 30,   account_type = \"Bill\",   freq = 30 )  # Initialize a target savings account without a due date car_saving <- GrandchildAccount$new(   name = \"Car Fund\",   allocation = 0.2,   fixed_amount = 500000,   account_type = \"FixedSaving\" )  ## ------------------------------------------------ ## Method `GrandchildAccount$get_due_date` ## ------------------------------------------------  rent <- GrandchildAccount$new(   name = \"Rent\",   fixed_amount = 75000,   due_date = Sys.Date() + 30 ) rent$get_due_date() #> [1] \"2025-10-12\"  ## ------------------------------------------------ ## Method `GrandchildAccount$set_due_date` ## ------------------------------------------------  bill <- GrandchildAccount$new(name = \"Electricity\", fixed_amount = 5000) bill$set_due_date(Sys.Date() + 15) #> Due date for Electricity set to 20358   ## ------------------------------------------------ ## Method `GrandchildAccount$get_fixed_amount` ## ------------------------------------------------  rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 75000) rent$get_fixed_amount() #> [1] 75000 #> [1] 75000  ## ------------------------------------------------ ## Method `GrandchildAccount$set_fixed_amount` ## ------------------------------------------------  rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 50000) rent$set_fixed_amount(75000) #> Fixed amount for Rent set to 75000  #> Fixed amount for Rent set to 75000  ## ------------------------------------------------ ## Method `GrandchildAccount$get_account_type` ## ------------------------------------------------  rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 50000) rent$set_fixed_amount(75000) #> Fixed amount for Rent set to 75000  #> Fixed amount for Rent set to 75000   ## ------------------------------------------------ ## Method `GrandchildAccount$set_account_type` ## ------------------------------------------------  rent <- GrandchildAccount$new(name = \"Rent\", fixed_amount = 75000) rent$set_account_type(\"Bill\") #> Account type for Rent set to Bill  #> Account type for Rent set to Bill  ## ------------------------------------------------ ## Method `GrandchildAccount$deposit` ## ------------------------------------------------  # main account main<- MainAccount$new(\"main\")  # child account child <- ChildAccount$new(   name = \"Emergency Fund\",   allocation = 0.3,   priority = 2 )  # Grand child account bill <- GrandchildAccount$new(   name = \"Rent\",   fixed_amount = 75000,   account_type = \"Bill\",   due_date = Sys.Date(),   freq = 30 ) # attach grand child to parent main$add_child_account(child) child$add_child_account(bill) bill$deposit(75000,channel=\"ABSA\") #> Due date extended. Number of periods unpaid: 2  #> Rent reactivated. Outstanding balance due: 150000  #> Deposited: 75000 via ABSA - Transaction ID: SYS6A1E7A770C   # Example with surplus being returned to parent: bill$deposit(80000,channel=\"ABSA\") #> Deposited: 75000 via ABSA - Transaction ID: SYSFF27832100  #> Rent has become inactive . #> Extra amount of 5000 moved to Emergency Fund  #> Rent fully funded for 2 period(s)  # Example with underpayment: bill$deposit(20000,channel=\"ABSA\")  # Remains active, shows updated due #> Deposit not allowed. Account is not active. #> Rent has become inactive . #> Extra amount of 20000 moved to Emergency Fund  #> Rent fully funded for 2 period(s)  ## ------------------------------------------------ ## Method `GrandchildAccount$withdraw` ## ------------------------------------------------  # Withdraw a partial amount from a fully funded rent account rent <- GrandchildAccount$new(\"Rent\", fixed_amount = 75000, account_type = \"Bill\") rent$deposit(75000,channel=\"ABSA\") #> Deposited: 75000 via ABSA - Transaction ID: SYS955F8566DB  #> Rent has become inactive . #> Rent fully funded for 1 period(s) # Now equivalent to 0.53 of the rent period remaining. rent$withdraw(35000,channel=\"ABSA\") #> Withdrew: 35000 via ABSA - Transaction ID: SYS954F45B5E9    ## ------------------------------------------------ ## Method `GrandchildAccount$get_account_freq` ## ------------------------------------------------  acc <- GrandchildAccount$new(   \"Rent\",   fixed_amount = 1000,   freq = 30 ) acc$get_account_freq() #> [1] 30 # [1] 30  ## ------------------------------------------------ ## Method `GrandchildAccount$set_account_freq` ## ------------------------------------------------  acc <- GrandchildAccount$new(\"Water Bill\", fixed_amount = 500) acc$set_account_freq(30) #> Frequency for Water Bill set to 30  # Frequency for Water Bill set to 30  ## ------------------------------------------------ ## Method `GrandchildAccount$get_account_periods` ## ------------------------------------------------  acc <- GrandchildAccount$new(   \"Internet Bill\",   fixed_amount = 2500,   freq = 30  ) acc$get_account_periods() #> [1] 1 # [1] 1  ## ------------------------------------------------ ## Method `GrandchildAccount$set_account_periods` ## ------------------------------------------------  acc <- GrandchildAccount$new(\"Loan Payment\", fixed_amount = 10000, freq = 30) acc$set_account_periods(3) #> Loan Payment has 3 period(s) # Output: Loan Payment has 3 period(s)"},{"path":"/reference/MainAccount.html","id":null,"dir":"Reference","previous_headings":"","what":"MainAccount Class — MainAccount","title":"MainAccount Class — MainAccount","text":"`MainAccount` R6 class represents top-level virtual account hierarchical financial structure. receives income responsible distributing funds child accounts based allocation rules. class core budgeting engine manages: Income reception logging. Transaction tracking via structured data frame. list linked child accounts. Auto-generated UUID identification. balance reflects manual system transactions.","code":""},{"path":"/reference/MainAccount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MainAccount Class — MainAccount","text":"account includes following core attributes: uuid unique identifier account, auto-generated. name Human-readable name account. balance Current balance account. transactions `data.frame` tracking transaction logs, including   custom system transactions. transaction_counter Used internally create unique transaction   IDs. child_accounts list containing attached child accounts. total_allocation Tracks total allocation distributed   children. path Logical traversal path root (used locate accounts   hierarchically).","code":""},{"path":"/reference/MainAccount.html","id":"hierarchy","dir":"Reference","previous_headings":"","what":"Hierarchy","title":"MainAccount Class — MainAccount","text":"top-level class hierarchy includes: MainAccount: Root virtual budget system. ChildAccount: Draws portion income   MainAccount. GrandChildAccount: Represents specific budget goals   (e.g., rent, savings) due dates, frequency, priority logic.","code":""},{"path":[]},{"path":"/reference/MainAccount.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"MainAccount Class — MainAccount","text":"uuid Auto-generated unique identifier. name Account name. balance Current balance. transactions `data.frame` transaction logs. transaction_counter Counter used generate unique transaction IDs. child_accounts List child accounts. total_allocation Numeric. Sum allocated funds children. path Character vector representing account's hierarchy path. # imports","code":""},{"path":[]},{"path":"/reference/MainAccount.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"MainAccount Class — MainAccount","text":"MainAccount$new() MainAccount$generate_transaction_id() MainAccount$is_duplicate_transaction() MainAccount$deposit() MainAccount$distribute_to_children() MainAccount$add_child_account() MainAccount$set_child_allocation() MainAccount$withdraw() MainAccount$get_balance() MainAccount$get_transactions() MainAccount$list_child_accounts() MainAccount$find_account() MainAccount$find_account_by_uuid() MainAccount$move_balance() MainAccount$list_all_accounts() MainAccount$compute_total_balance() MainAccount$compute_total_due() MainAccount$compute_total_due_within_n_days() MainAccount$spending() MainAccount$total_income() MainAccount$allocated_amount() MainAccount$income_utilization() MainAccount$walking_amount() MainAccount$clone()","code":""},{"path":"/reference/MainAccount.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"MainAccount Class — MainAccount","text":"Constructor `MainAccount` class. Initializes new main account unique identifier, user-defined name, zero balance, empty transaction data frame. Also sets default account path \"main_account\".","code":""},{"path":"/reference/MainAccount.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$new(name, balance = 0)"},{"path":"/reference/MainAccount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"name Character. name main account. Used identification app UI reports. balance Numeric. Initial balance account.","code":""},{"path":"/reference/MainAccount.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{ main_acc <- MainAccount$new(name = \"My Main Account\") print(main_acc$uuid) print(main_acc$balance) print(main_acc$transactions) }"},{"path":"/reference/MainAccount.html","id":"method-generate-transaction-id-","dir":"Reference","previous_headings":"","what":"Method generate_transaction_id()","title":"MainAccount Class — MainAccount","text":"Generates unique system transaction ID appending incrementing counter fixed prefix (\"sys\"). counter incremented future calls.","code":""},{"path":"/reference/MainAccount.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$generate_transaction_id()"},{"path":"/reference/MainAccount.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"character string representing generated transaction ID.","code":""},{"path":"/reference/MainAccount.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(name = \"Salary Pool\")   txn_id1 <- main_acc$generate_transaction_id()   txn_id2 <- main_acc$generate_transaction_id()   print(txn_id1)  # e.g., \"sys1\"   print(txn_id2)  # e.g., \"sys2\" }"},{"path":"/reference/MainAccount.html","id":"method-is-duplicate-transaction-","dir":"Reference","previous_headings":"","what":"Method is_duplicate_transaction()","title":"MainAccount Class — MainAccount","text":"Checks given transaction number already exists transaction log. used prevent duplicate transaction entries.","code":""},{"path":"/reference/MainAccount.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$is_duplicate_transaction(transaction_number)"},{"path":"/reference/MainAccount.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"transaction_number Character. transaction ID checked.","code":""},{"path":"/reference/MainAccount.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Logical. TRUE transaction number exists, FALSE otherwise.","code":""},{"path":"/reference/MainAccount.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   # Create a new main account   main_acc <- MainAccount$new(name = \"Salary Pool\")    # Manually add a transaction with ID \"sys1\"   main_acc$transactions <- data.frame(     Type = \"Income\",     By = \"User\",     TransactionID = \"sys1\",     Channel = \"Bank\",     Amount = 5000,     Balance = 5000,     amount_due = 0,     overall_balance = 5000,     Date = Sys.time(),     stringsAsFactors = FALSE   )    # Check for duplicate   main_acc$is_duplicate_transaction(\"sys1\")  # Returns TRUE   main_acc$is_duplicate_transaction(\"sys2\")  # Returns FALSE }"},{"path":"/reference/MainAccount.html","id":"method-deposit-","dir":"Reference","previous_headings":"","what":"Method deposit()","title":"MainAccount Class — MainAccount","text":"Deposits specified amount account distributes child accounts based allocation rules. method also records transaction internal ledger.","code":""},{"path":"/reference/MainAccount.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$deposit(   amount,   transaction_number = NULL,   by = \"User\",   channel = NULL,   transaction_date = Sys.time() )"},{"path":"/reference/MainAccount.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"amount Numeric. amount money deposit. Must greater zero. transaction_number Optional character. unique identifier transaction. provided, system generates one automatically. Character. Identifier depositor (default `\"User\"`). channel Character. source funds (e.g., `\"ABSA\"`, `\"MPESA\"`). Required. transaction_date POSIXct character. timestamp transaction (defaults current time).","code":""},{"path":"/reference/MainAccount.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"return value. method updates account balance, transaction log, distributes funds child accounts.","code":""},{"path":"/reference/MainAccount.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(name = \"Salary Pool\")   main_acc$deposit(     amount = 1000,     channel = \"Bank Transfer\"   ) }"},{"path":"/reference/MainAccount.html","id":"method-distribute-to-children-","dir":"Reference","previous_headings":"","what":"Method distribute_to_children()","title":"MainAccount Class — MainAccount","text":"Distributes given amount account active child accounts based allocation weights priorities. amount small (less 0.10), routed entirely highest-priority child. method automatically called deposit parent account. performs internal withdrawals instructs child accounts deposit corresponding shares.","code":""},{"path":"/reference/MainAccount.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$distribute_to_children(amount, transaction, by = \"System\")"},{"path":"/reference/MainAccount.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"amount Numeric. Total amount available distribution. transaction Character. transaction ID associated distribution. Character. Identifier actor performing transfer (default `\"System\"`).","code":""},{"path":"/reference/MainAccount.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"return value. method updates balances transaction logs main account affected child accounts.","code":""},{"path":"/reference/MainAccount.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(name = \"Salary Pool\")   child1 <- ChildAccount$new(name = \"Food Fund\", allocation = 0.6)   child2 <- ChildAccount$new(name = \"Savings\", allocation = 0.4)   main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    main_acc$deposit(amount = 1000, channel = \"Bank\")   # This will trigger distribute_to_children internally. }"},{"path":"/reference/MainAccount.html","id":"method-add-child-account-","dir":"Reference","previous_headings":"","what":"Method add_child_account()","title":"MainAccount Class — MainAccount","text":"Adds `ChildAccount` object list child accounts account. checks valid allocation percentages (must exceed 100 hierarchical path references, updates total allocation.","code":""},{"path":"/reference/MainAccount.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$add_child_account(child_account)"},{"path":"/reference/MainAccount.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"child_account object class `ChildAccount``GrandChildAccount`, representing account added subordinate current main account.","code":""},{"path":"/reference/MainAccount.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"MainAccount Class — MainAccount","text":"child's allocation zero, automatically marked inactive. method also updates logical `path` child attaches `parent` reference maintain hierarchy.","code":""},{"path":"/reference/MainAccount.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"None. method modifies object -place.","code":""},{"path":"/reference/MainAccount.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(name = \"Master\")   child_acc <- ChildAccount$new(name = \"Savings\", allocation = 0.4)   main_acc$add_child_account(child_acc) }"},{"path":"/reference/MainAccount.html","id":"method-set-child-allocation-","dir":"Reference","previous_headings":"","what":"Method set_child_allocation()","title":"MainAccount Class — MainAccount","text":"Updates allocation percentage specified child account. Ensures total allocation across children exceed  100","code":""},{"path":"/reference/MainAccount.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$set_child_allocation(child_account_name, new_allocation)"},{"path":"/reference/MainAccount.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"child_account_name Character. name child account whose allocation updated. new_allocation Numeric. new allocation proportion (0 1).","code":""},{"path":"/reference/MainAccount.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"MainAccount Class — MainAccount","text":"allocation set zero, child account marked inactive. function automatically updates total allocation tracker.","code":""},{"path":"/reference/MainAccount.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"None. method modifies object -place.","code":""},{"path":"/reference/MainAccount.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   child <- ChildAccount$new(name = \"Emergency\", allocation = 0.2)   main_acc$add_child_account(child)   main_acc$set_child_allocation(\"Emergency\", 0.3) }"},{"path":"/reference/MainAccount.html","id":"method-withdraw-","dir":"Reference","previous_headings":"","what":"Method withdraw()","title":"MainAccount Class — MainAccount","text":"Withdraws specified amount account logs transaction. transaction number generated automatically  provided. Withdrawals require valid channel sufficient balance.","code":""},{"path":"/reference/MainAccount.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$withdraw(   amount,   transaction_number = NULL,   by = \"User\",   channel = NULL,   transaction_date = Sys.time() )"},{"path":"/reference/MainAccount.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"amount Numeric. amount withdraw. Must greater zero #' exceed current balance. transaction_number Optional character. Custom transaction ID. NULL, system-generated ID used. Character. entity initiating withdrawal. Default `\"User\"`. channel Character. withdrawal channel (e.g., \"Bank Transfer\"). Required. transaction_date POSIXct. Timestamp transaction. Defaults `Sys.time()`.","code":""},{"path":"/reference/MainAccount.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"None. Modifies object's internal state reducing balance appending new transaction log.","code":""},{"path":"/reference/MainAccount.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Primary Pool\")   main_acc$deposit(amount = 1000, channel = \"Mobile\", by = \"User\")   main_acc$withdraw(amount = 200, channel = \"ATM\", by = \"User\") }"},{"path":"/reference/MainAccount.html","id":"method-get-balance-","dir":"Reference","previous_headings":"","what":"Method get_balance()","title":"MainAccount Class — MainAccount","text":"Returns current balance account prints console.","code":""},{"path":"/reference/MainAccount.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$get_balance()"},{"path":"/reference/MainAccount.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Numeric. current account balance.","code":""},{"path":"/reference/MainAccount.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Primary Pool\")   main_acc$deposit(amount = 500, channel = \"Bank Transfer\")   main_acc$get_balance() }"},{"path":"/reference/MainAccount.html","id":"method-get-transactions-","dir":"Reference","previous_headings":"","what":"Method get_transactions()","title":"MainAccount Class — MainAccount","text":"Retrieves displays transaction history account. transactions found, message printed. Otherwise, transaction log displayed console. method inherited child grandchild account classes.","code":""},{"path":"/reference/MainAccount.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$get_transactions()"},{"path":"/reference/MainAccount.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"data frame containing account's transaction history.","code":""},{"path":"/reference/MainAccount.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   acc <- MainAccount$new(\"Main Budget\")   acc$deposit(500, channel = \"M-Pesa\")   acc$get_transactions() }"},{"path":"/reference/MainAccount.html","id":"method-list-child-accounts-","dir":"Reference","previous_headings":"","what":"Method list_child_accounts()","title":"MainAccount Class — MainAccount","text":"Lists direct child accounts attached account. child accounts found, message printed. method inherited `ChildAccount` `GrandChildAccount`, allowing recursive visibility nested account structures.","code":""},{"path":"/reference/MainAccount.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$list_child_accounts()"},{"path":"/reference/MainAccount.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Invisibly returns character vector child account names.","code":""},{"path":"/reference/MainAccount.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main Budget\")   child <- ChildAccount$new(\"Bills\", allocation = 0.5)   main_acc$add_child_account(child)   main_acc$list_child_accounts() } # Recursively find all accounts by name"},{"path":"/reference/MainAccount.html","id":"method-find-account-","dir":"Reference","previous_headings":"","what":"Method find_account()","title":"MainAccount Class — MainAccount","text":"Recursively searches current account, children, parent chain collect **** accounts given name. version differs original stopping first match—returns list **** matches instead. avoids infinite recursion tracking visited account paths.","code":""},{"path":"/reference/MainAccount.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$find_account(target_name, visited_paths = NULL, matches = NULL)"},{"path":"/reference/MainAccount.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"target_name Character. name account(s) locate. visited_paths (Internal use ) Tracks visited paths avoid cycles. matches (Internal use ) list accumulate matches recursion.","code":""},{"path":"/reference/MainAccount.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"list account objects matching given name. matches found, returns empty list.","code":""},{"path":"/reference/MainAccount.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main <- MainAccount$new(\"Main\")   savings1 <- ChildAccount$new(\"Savings\", allocation = 0.5)   savings2 <- ChildAccount$new(\"Savings\", allocation = 0.3)   main$add_child_account(savings1)   main$add_child_account(savings2)   found <- main$find_account(\"Savings\")   length(found)  # 2   found[[1]]$uuid }"},{"path":"/reference/MainAccount.html","id":"method-find-account-by-uuid-","dir":"Reference","previous_headings":"","what":"Method find_account_by_uuid()","title":"MainAccount Class — MainAccount","text":"Recursively searches account unique UUID. method traverses downward child accounts upward parent, needed, preventing circular recursion tracking visited paths. especially useful account names unique UUIDs .","code":""},{"path":"/reference/MainAccount.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$find_account_by_uuid(target_uuid, visited_paths = NULL)"},{"path":"/reference/MainAccount.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"target_uuid Character. UUID account find. visited_paths Internal use . list used track visited paths prevent infinite loops cyclic nested account structures.","code":""},{"path":"/reference/MainAccount.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Returns account object whose UUID matches target, NULL match found.","code":""},{"path":"/reference/MainAccount.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Root\")   groceries <- ChildAccount$new(\"Groceries\", allocation = 0.3)   main_acc$add_child_account(groceries)   found <- main_acc$find_account_by_uuid(groceries$uuid)   if (!is.null(found)) cat(\"Found UUID:\", found$uuid) }"},{"path":"/reference/MainAccount.html","id":"method-move-balance-","dir":"Reference","previous_headings":"","what":"Method move_balance()","title":"MainAccount Class — MainAccount","text":"Moves specified amount current account another account identified **UUID**. intended internal transfers within account tree. reuses `withdraw()` `deposit()` logic logs transfer using \"Internal Transfer\" channel. target account resolved using `find_account_by_uuid()`, name. ensures unambiguous targeting even accounts share name.","code":""},{"path":"/reference/MainAccount.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$move_balance(target_account_uuid, amount)"},{"path":"/reference/MainAccount.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"target_account_uuid Character. UUID account funds moved. amount Numeric. amount transfer. Must less equal current account's balance.","code":""},{"path":"/reference/MainAccount.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"return value. Side effects include balance updates transaction logs source target accounts.","code":""},{"path":"/reference/MainAccount.html","id":"examples-13","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   savings <- ChildAccount$new(\"Savings\", allocation = 0.5)   emergency <- ChildAccount$new(\"Emergency\", allocation = 0.5)   main_acc$add_child_account(savings)   main_acc$add_child_account(emergency)    # Initial deposit   main_acc$deposit(1000, channel = \"Bank\")    # Move 200 to savings using UUID   main_acc$move_balance(savings$uuid, 200) }"},{"path":"/reference/MainAccount.html","id":"method-list-all-accounts-","dir":"Reference","previous_headings":"","what":"Method list_all_accounts()","title":"MainAccount Class — MainAccount","text":"Recursively lists names accounts hierarchy, upward (towards ancestors) downward (towards descendants), starting current account. method avoids revisiting account tracking visited paths, preventing infinite loops case circular references.","code":""},{"path":"/reference/MainAccount.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$list_all_accounts(visited_paths = NULL)"},{"path":"/reference/MainAccount.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"visited_paths Optional list. Used internally recursion avoid revisiting accounts. generally left `NULL` user.","code":""},{"path":"/reference/MainAccount.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"character vector account names found across full reachable tree (children ancestors) current account.","code":""},{"path":"/reference/MainAccount.html","id":"examples-14","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   savings <- ChildAccount$new(\"Savings\", allocation = 0.4)   emergency <- ChildAccount$new(\"Emergency\", allocation = 0.6)    main_acc$add_child_account(savings)   main_acc$add_child_account(emergency)    # List all accounts from the root   main_acc$list_all_accounts()   # Output: \"Main\" \"Savings\" \"Emergency\"    # List all accounts from a child node (will include parents)   savings$list_all_accounts()   # Output: \"Savings\" \"Main\" \"Emergency\" }"},{"path":"/reference/MainAccount.html","id":"method-compute-total-balance-","dir":"Reference","previous_headings":"","what":"Method compute_total_balance()","title":"MainAccount Class — MainAccount","text":"Recursively computes total balance held current account child accounts. method includes balance account called traverses tree sum balances active descendants.","code":""},{"path":"/reference/MainAccount.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$compute_total_balance()"},{"path":"/reference/MainAccount.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Numeric. total aggregated balance account entire descendant subtree.","code":""},{"path":"/reference/MainAccount.html","id":"examples-15","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    main_acc$deposit(100, channel = \"Bank\", transaction_number = \"txn1\")   # This distributes 100 into child1 and child2 based on allocation    # Check total balance recursively   total <- main_acc$compute_total_balance()   print(total)   # Should return 100 (main + children) }"},{"path":"/reference/MainAccount.html","id":"method-compute-total-due-","dir":"Reference","previous_headings":"","what":"Method compute_total_due()","title":"MainAccount Class — MainAccount","text":"Recursively computes total amount due current account descendant child accounts. `amount_due` defined account, defaults zero. useful aggregating outstanding dues across entire hierarchical account structure (e.g., main → child → grandchild).","code":""},{"path":"/reference/MainAccount.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$compute_total_due()"},{"path":"/reference/MainAccount.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Numeric. total due amount account descendants.","code":""},{"path":"/reference/MainAccount.html","id":"examples-16","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.6)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.4)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Manually set dues   main_acc$amount_due <- 50   child1$amount_due <- 20   child2$amount_due <- 30    total_due <- main_acc$compute_total_due()   print(total_due)   # Should return 100 (50 + 20 + 30) }"},{"path":"/reference/MainAccount.html","id":"method-compute-total-due-within-n-days-","dir":"Reference","previous_headings":"","what":"Method compute_total_due_within_n_days()","title":"MainAccount Class — MainAccount","text":"Recursively computes total amount due current account child accounts due date within next n days current system time. method useful identifying upcoming payments obligations multi-account hierarchy prioritizing based urgency.","code":""},{"path":"/reference/MainAccount.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$compute_total_due_within_n_days(n)"},{"path":"/reference/MainAccount.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"n Integer. number days today within dues considered. Dues without due date ignored.","code":""},{"path":"/reference/MainAccount.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Numeric. total due amount within next n days across account hierarchy.","code":""},{"path":"/reference/MainAccount.html","id":"examples-17","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.6)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.4)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Assign dues and due dates   main_acc$amount_due <- 100   main_acc$due_date <- Sys.time() + 2 * 24 * 60 * 60  # Due in 2 days    child1$amount_due <- 50   child1$due_date <- Sys.time() + 5 * 24 * 60 * 60    # Due in 5 days    child2$amount_due <- 70   child2$due_date <- Sys.time() + 10 * 24 * 60 * 60   # Due in 10 days    # Compute total dues within next 7 days   total_due_7_days <- main_acc$compute_total_due_within_n_days(7)   print(total_due_7_days)   # Should return 100 + 50 = 150 }"},{"path":"/reference/MainAccount.html","id":"method-spending-","dir":"Reference","previous_headings":"","what":"Method spending()","title":"MainAccount Class — MainAccount","text":"Recursively computes total spending (.e., user-initiated withdrawals) current account child accounts within  specified date range. Spending defined withdrawals made user (`== \"User\"`), excluding system-initiated internal transfers. function includes current account descendants calculation.","code":""},{"path":"/reference/MainAccount.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$spending(daterange = c(Sys.Date() - 365000, Sys.Date()))"},{"path":"/reference/MainAccount.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"daterange Date POSIXct vector length 2. start end dates period compute spending. Defaults entire timeline.","code":""},{"path":"/reference/MainAccount.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"Numeric. total spending amount specified date range.","code":""},{"path":"/reference/MainAccount.html","id":"examples-18","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Simulate some deposits and withdrawals   main_acc$deposit(500, \"T1\", By = \"User\", channel = \"Cash\")   main_acc$withdraw(200, By = \"User\", channel = \"Spending\",   transaction_date = Sys.time() - 10)   child1$deposit(300, \"T2\", By = \"User\", channel = \"Mobile\")   child1$withdraw(100, By = \"User\", channel = \"Shopping\",   transaction_date = Sys.time() - 5)    # Get total user spending in last 30 days   main_acc$spending(c(Sys.Date() - 30, Sys.Date()))   # Should return 200 + 100 = 300 }"},{"path":"/reference/MainAccount.html","id":"method-total-income-","dir":"Reference","previous_headings":"","what":"Method total_income()","title":"MainAccount Class — MainAccount","text":"Recursively computes total income (.e., user-initiated deposits) current account child accounts within specified date range. function sums \"Deposit\" transactions `` field set `\"User\"`. includes current account descendants income calculation.","code":""},{"path":"/reference/MainAccount.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$total_income(daterange = c(Sys.Date() - 365000, Sys.Date()))"},{"path":"/reference/MainAccount.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"daterange vector two Dates POSIXct objects specifying start end dates income calculation. Defaults entire timeline.","code":""},{"path":"/reference/MainAccount.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"numeric value representing total income across relevant accounts within specified date range.","code":""},{"path":"/reference/MainAccount.html","id":"examples-19","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Simulate some deposits   main_acc$deposit(500, \"TX01\", By = \"User\", channel = \"Cash\",   transaction_date = Sys.time() - 7)   child1$deposit(300, \"TX02\", By = \"User\", channel = \"Mobile\",   transaction_date = Sys.time() - 3)    # Get total income in last 10 days   main_acc$total_income(c(Sys.Date() - 10, Sys.Date()))   # Should return 500 + 300 = 800 }"},{"path":"/reference/MainAccount.html","id":"method-allocated-amount-","dir":"Reference","previous_headings":"","what":"Method allocated_amount()","title":"MainAccount Class — MainAccount","text":"Calculates total allocated amount account child accounts specified date range. includes **deposits** (`\"User\"` `\"System\"`) current account, **plus** **user-initiated** deposits child deeper-level descendant accounts. provides insight much funding (regardless origin) allocated directly  indirectly node account tree.","code":""},{"path":"/reference/MainAccount.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$allocated_amount(daterange = c(Sys.Date() - 365000, Sys.Date()))"},{"path":"/reference/MainAccount.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"daterange vector two `Date` `POSIXct` objects specifying start end dates deposit aggregation. Defaults wide range.","code":""},{"path":"/reference/MainAccount.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"numeric value representing total allocated amount across account descendants within specified date range.","code":""},{"path":"/reference/MainAccount.html","id":"examples-20","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    main_acc$deposit(1000, \"TX001\", By = \"System\", channel = \"Bank\",   transaction_date = Sys.time() - 5)   child1$deposit(300, \"TX002\", By = \"User\", channel = \"Mobile\",   transaction_date = Sys.time() - 3)   child2$deposit(200, \"TX003\", By = \"User\", channel = \"Cash\",   transaction_date = Sys.time() - 2)    # Get total allocated amount within last 7 days   main_acc$allocated_amount(c(Sys.Date() - 7, Sys.Date()))   # Expected output: 1000 (System) + 300 + 200 = 1500 }"},{"path":"/reference/MainAccount.html","id":"method-income-utilization-","dir":"Reference","previous_headings":"","what":"Method income_utilization()","title":"MainAccount Class — MainAccount","text":"Computes **income utilization ratio** specified date range. calculated ratio total user withdrawals (`spending`) total allocated income (`allocated_amount`). measures effectively funds used relative total  amount deposited (user system). value close 1 indicates high utilization (funds spent), valueclose 0 indicates low spending relative funds received.","code":""},{"path":"/reference/MainAccount.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$income_utilization(daterange = c(Sys.Date() - 365000, Sys.Date()))"},{"path":"/reference/MainAccount.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"daterange vector two `Date` `POSIXct` values defining date range calculation. Defaults large historical window.","code":""},{"path":"/reference/MainAccount.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"numeric value (0 potentially >1) representing income utilization ratio. income allocated, small epsilon added denominator avoid division zero.","code":""},{"path":"/reference/MainAccount.html","id":"examples-21","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{   account <- MainAccount$new(\"Parent\")   account$deposit(1000, \"TX001\", By = \"System\", channel = \"Bank\")   account$withdraw(200, By = \"User\", channel = \"Mobile\")    account$income_utilization()   # Expected output: 200 / 1000 = 0.2 }"},{"path":"/reference/MainAccount.html","id":"method-walking-amount-","dir":"Reference","previous_headings":"","what":"Method walking_amount()","title":"MainAccount Class — MainAccount","text":"Computes **latest recorded amount** (either `amount_due` `balance`) `Track_dues_and_balance` tracker current account child accounts within specified date range. retrieves latest entry given date range, recursively sums values child accounts.","code":""},{"path":"/reference/MainAccount.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$walking_amount(   amt_type = \"amount_due\",   daterange = c(Sys.Date() - 365000, Sys.Date()) )"},{"path":"/reference/MainAccount.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"amt_type string specifying metric return: - `\"amount_due\"`: Return last tracked `Amount_due`. - `\"Balance\"`: Return last tracked `Balance`. daterange vector two dates (class `Date` `POSIXct`) specifying time window. Default: wide historical range.","code":""},{"path":"/reference/MainAccount.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"MainAccount Class — MainAccount","text":"numeric value representing sum either latest `Amount_due` `Balance` account children.","code":""},{"path":"/reference/MainAccount.html","id":"examples-22","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"\\dontrun{ account$walking_amount(\"amount_due\", c(Sys.Date() - 30, Sys.Date())) account$walking_amount(\"Balance\", c(Sys.Date() - 7, Sys.Date())) }"},{"path":"/reference/MainAccount.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"MainAccount Class — MainAccount","text":"objects class cloneable method.","code":""},{"path":"/reference/MainAccount.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"MainAccount Class — MainAccount","text":"","code":"MainAccount$clone(deep = FALSE)"},{"path":"/reference/MainAccount.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"MainAccount Class — MainAccount","text":"deep Whether make deep clone.","code":""},{"path":"/reference/MainAccount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MainAccount Class — MainAccount","text":"","code":"library(R6) library(uuid) library(tidyverse) # Create a main account  acc <- MainAccount$new(name = \"Salary Pool\", balance = 1000)  # Generate a system transaction ID acc$generate_transaction_id() #> [1] \"SYS29154FE57C\"  # Check for duplicate transaction ID acc$is_duplicate_transaction(\"sys1\") #> [1] FALSE  # Inspect balance acc$balance #> [1] 1000  # Inspect UUID acc$uuid #> [1] \"acce98f9cce-21e9-4cd3-8e28-24d85a0d0849\"   ## ------------------------------------------------ ## Method `MainAccount$new` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ main_acc <- MainAccount$new(name = \"My Main Account\") print(main_acc$uuid) print(main_acc$balance) print(main_acc$transactions) } # }  ## ------------------------------------------------ ## Method `MainAccount$generate_transaction_id` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(name = \"Salary Pool\")   txn_id1 <- main_acc$generate_transaction_id()   txn_id2 <- main_acc$generate_transaction_id()   print(txn_id1)  # e.g., \"sys1\"   print(txn_id2)  # e.g., \"sys2\" } # }  ## ------------------------------------------------ ## Method `MainAccount$is_duplicate_transaction` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   # Create a new main account   main_acc <- MainAccount$new(name = \"Salary Pool\")    # Manually add a transaction with ID \"sys1\"   main_acc$transactions <- data.frame(     Type = \"Income\",     By = \"User\",     TransactionID = \"sys1\",     Channel = \"Bank\",     Amount = 5000,     Balance = 5000,     amount_due = 0,     overall_balance = 5000,     Date = Sys.time(),     stringsAsFactors = FALSE   )    # Check for duplicate   main_acc$is_duplicate_transaction(\"sys1\")  # Returns TRUE   main_acc$is_duplicate_transaction(\"sys2\")  # Returns FALSE } # }  ## ------------------------------------------------ ## Method `MainAccount$deposit` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(name = \"Salary Pool\")   main_acc$deposit(     amount = 1000,     channel = \"Bank Transfer\"   ) } # }   ## ------------------------------------------------ ## Method `MainAccount$distribute_to_children` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(name = \"Salary Pool\")   child1 <- ChildAccount$new(name = \"Food Fund\", allocation = 0.6)   child2 <- ChildAccount$new(name = \"Savings\", allocation = 0.4)   main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    main_acc$deposit(amount = 1000, channel = \"Bank\")   # This will trigger distribute_to_children internally. } # }   ## ------------------------------------------------ ## Method `MainAccount$add_child_account` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(name = \"Master\")   child_acc <- ChildAccount$new(name = \"Savings\", allocation = 0.4)   main_acc$add_child_account(child_acc) } # }  ## ------------------------------------------------ ## Method `MainAccount$set_child_allocation` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   child <- ChildAccount$new(name = \"Emergency\", allocation = 0.2)   main_acc$add_child_account(child)   main_acc$set_child_allocation(\"Emergency\", 0.3) } # }  ## ------------------------------------------------ ## Method `MainAccount$withdraw` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Primary Pool\")   main_acc$deposit(amount = 1000, channel = \"Mobile\", by = \"User\")   main_acc$withdraw(amount = 200, channel = \"ATM\", by = \"User\") } # }  ## ------------------------------------------------ ## Method `MainAccount$get_balance` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Primary Pool\")   main_acc$deposit(amount = 500, channel = \"Bank Transfer\")   main_acc$get_balance() } # }  ## ------------------------------------------------ ## Method `MainAccount$get_transactions` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   acc <- MainAccount$new(\"Main Budget\")   acc$deposit(500, channel = \"M-Pesa\")   acc$get_transactions() } # }  ## ------------------------------------------------ ## Method `MainAccount$list_child_accounts` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main Budget\")   child <- ChildAccount$new(\"Bills\", allocation = 0.5)   main_acc$add_child_account(child)   main_acc$list_child_accounts() } # } # Recursively find all accounts by name   ## ------------------------------------------------ ## Method `MainAccount$find_account` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main <- MainAccount$new(\"Main\")   savings1 <- ChildAccount$new(\"Savings\", allocation = 0.5)   savings2 <- ChildAccount$new(\"Savings\", allocation = 0.3)   main$add_child_account(savings1)   main$add_child_account(savings2)   found <- main$find_account(\"Savings\")   length(found)  # 2   found[[1]]$uuid } # }  ## ------------------------------------------------ ## Method `MainAccount$find_account_by_uuid` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Root\")   groceries <- ChildAccount$new(\"Groceries\", allocation = 0.3)   main_acc$add_child_account(groceries)   found <- main_acc$find_account_by_uuid(groceries$uuid)   if (!is.null(found)) cat(\"Found UUID:\", found$uuid) } # }  ## ------------------------------------------------ ## Method `MainAccount$move_balance` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   savings <- ChildAccount$new(\"Savings\", allocation = 0.5)   emergency <- ChildAccount$new(\"Emergency\", allocation = 0.5)   main_acc$add_child_account(savings)   main_acc$add_child_account(emergency)    # Initial deposit   main_acc$deposit(1000, channel = \"Bank\")    # Move 200 to savings using UUID   main_acc$move_balance(savings$uuid, 200) } # }  ## ------------------------------------------------ ## Method `MainAccount$list_all_accounts` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   savings <- ChildAccount$new(\"Savings\", allocation = 0.4)   emergency <- ChildAccount$new(\"Emergency\", allocation = 0.6)    main_acc$add_child_account(savings)   main_acc$add_child_account(emergency)    # List all accounts from the root   main_acc$list_all_accounts()   # Output: \"Main\" \"Savings\" \"Emergency\"    # List all accounts from a child node (will include parents)   savings$list_all_accounts()   # Output: \"Savings\" \"Main\" \"Emergency\" } # }  ## ------------------------------------------------ ## Method `MainAccount$compute_total_balance` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    main_acc$deposit(100, channel = \"Bank\", transaction_number = \"txn1\")   # This distributes 100 into child1 and child2 based on allocation    # Check total balance recursively   total <- main_acc$compute_total_balance()   print(total)   # Should return 100 (main + children) } # }  ## ------------------------------------------------ ## Method `MainAccount$compute_total_due` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.6)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.4)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Manually set dues   main_acc$amount_due <- 50   child1$amount_due <- 20   child2$amount_due <- 30    total_due <- main_acc$compute_total_due()   print(total_due)   # Should return 100 (50 + 20 + 30) } # }  ## ------------------------------------------------ ## Method `MainAccount$compute_total_due_within_n_days` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.6)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.4)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Assign dues and due dates   main_acc$amount_due <- 100   main_acc$due_date <- Sys.time() + 2 * 24 * 60 * 60  # Due in 2 days    child1$amount_due <- 50   child1$due_date <- Sys.time() + 5 * 24 * 60 * 60    # Due in 5 days    child2$amount_due <- 70   child2$due_date <- Sys.time() + 10 * 24 * 60 * 60   # Due in 10 days    # Compute total dues within next 7 days   total_due_7_days <- main_acc$compute_total_due_within_n_days(7)   print(total_due_7_days)   # Should return 100 + 50 = 150 } # }  ## ------------------------------------------------ ## Method `MainAccount$spending` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Simulate some deposits and withdrawals   main_acc$deposit(500, \"T1\", By = \"User\", channel = \"Cash\")   main_acc$withdraw(200, By = \"User\", channel = \"Spending\",   transaction_date = Sys.time() - 10)   child1$deposit(300, \"T2\", By = \"User\", channel = \"Mobile\")   child1$withdraw(100, By = \"User\", channel = \"Shopping\",   transaction_date = Sys.time() - 5)    # Get total user spending in last 30 days   main_acc$spending(c(Sys.Date() - 30, Sys.Date()))   # Should return 200 + 100 = 300 } # }  ## ------------------------------------------------ ## Method `MainAccount$total_income` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    # Simulate some deposits   main_acc$deposit(500, \"TX01\", By = \"User\", channel = \"Cash\",   transaction_date = Sys.time() - 7)   child1$deposit(300, \"TX02\", By = \"User\", channel = \"Mobile\",   transaction_date = Sys.time() - 3)    # Get total income in last 10 days   main_acc$total_income(c(Sys.Date() - 10, Sys.Date()))   # Should return 500 + 300 = 800 } # }  ## ------------------------------------------------ ## Method `MainAccount$allocated_amount` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   main_acc <- MainAccount$new(\"Main\")   child1 <- ChildAccount$new(\"Child1\", allocation = 0.5)   child2 <- ChildAccount$new(\"Child2\", allocation = 0.5)    main_acc$add_child_account(child1)   main_acc$add_child_account(child2)    main_acc$deposit(1000, \"TX001\", By = \"System\", channel = \"Bank\",   transaction_date = Sys.time() - 5)   child1$deposit(300, \"TX002\", By = \"User\", channel = \"Mobile\",   transaction_date = Sys.time() - 3)   child2$deposit(200, \"TX003\", By = \"User\", channel = \"Cash\",   transaction_date = Sys.time() - 2)    # Get total allocated amount within last 7 days   main_acc$allocated_amount(c(Sys.Date() - 7, Sys.Date()))   # Expected output: 1000 (System) + 300 + 200 = 1500 } # }  ## ------------------------------------------------ ## Method `MainAccount$income_utilization` ## ------------------------------------------------  if (FALSE) { # \\dontrun{   account <- MainAccount$new(\"Parent\")   account$deposit(1000, \"TX001\", By = \"System\", channel = \"Bank\")   account$withdraw(200, By = \"User\", channel = \"Mobile\")    account$income_utilization()   # Expected output: 200 / 1000 = 0.2 } # }  ## ------------------------------------------------ ## Method `MainAccount$walking_amount` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ account$walking_amount(\"amount_due\", c(Sys.Date() - 30, Sys.Date())) account$walking_amount(\"Balance\", c(Sys.Date() - 7, Sys.Date())) } # }"},{"path":"/reference/build_plugin_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Plugin Arguments for Storage Backend Functions — build_plugin_args","title":"Build Plugin Arguments for Storage Backend Functions — build_plugin_args","text":"Constructs list arguments storage plugin functions (e.g., `load_from_file`, `save_to_mongo`). merges base arguments passed directly plugin-specific configuration environment variables.","code":""},{"path":"/reference/build_plugin_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Plugin Arguments for Storage Backend Functions — build_plugin_args","text":"","code":"build_plugin_args(backend, mode = \"load\", ...)"},{"path":"/reference/build_plugin_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Plugin Arguments for Storage Backend Functions — build_plugin_args","text":"backend string indicating backend (e.g., \"file\", \"mongo\", \"gdrive\"). mode operation mode, one \"load\", \"save\", \"file_exists\", \"remove\". ... Additional arguments (e.g., `user_id`, `file_name`, etc.).","code":""},{"path":"/reference/build_plugin_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Plugin Arguments for Storage Backend Functions — build_plugin_args","text":"named list arguments suitable `.call()` calling plugin function.","code":""},{"path":"/reference/build_plugin_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Plugin Arguments for Storage Backend Functions — build_plugin_args","text":"Supports backends local file system, MongoDB, Google Drive.","code":""},{"path":"/reference/build_plugin_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Plugin Arguments for Storage Backend Functions — build_plugin_args","text":"","code":"Sys.setenv(ACCOUNT_BASE_DIR = \"user_accounts\") args <- build_plugin_args(   \"file\", \"load\",   user_id = \"user1\",   file_name = \"account_tree.Rds\" ) # Returns something like: # list(user_id = \"user1\", file_name = \"account_tree.Rds\", #      base_dir = \"user_accounts\")"},{"path":"/reference/coerce_numeric_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce JWT NumericDate claims into POSIXct — coerce_numeric_date","title":"Coerce JWT NumericDate claims into POSIXct — coerce_numeric_date","text":"NumericDate claims (RFC 7519) seconds since Unix epoch. helper flexible accepts: - `POSIXct`: returned -- Numeric (>= 1e6): treated epoch seconds (standard) - Numeric (< 1e6): treated days since epoch (e.g., `.numeric(Sys.Date())`) - Character digits: parsed numeric using rules - Character datetime string: parsed ISO8601 (via lubridate::ymd_hms)","code":""},{"path":"/reference/coerce_numeric_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce JWT NumericDate claims into POSIXct — coerce_numeric_date","text":"","code":"coerce_numeric_date(x)"},{"path":"/reference/coerce_numeric_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce JWT NumericDate claims into POSIXct — coerce_numeric_date","text":"x Value coerce (exp, iat, nbf claims)","code":""},{"path":"/reference/coerce_numeric_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce JWT NumericDate claims into POSIXct — coerce_numeric_date","text":"POSIXct UTC timezone","code":""},{"path":"/reference/coerce_numeric_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce JWT NumericDate claims into POSIXct — coerce_numeric_date","text":"","code":"coerce_numeric_date(Sys.time())                # POSIXct #> [1] \"2025-09-12 10:03:22 UTC\" coerce_numeric_date(as.numeric(Sys.time()))    # epoch seconds #> [1] \"2025-09-12 10:03:22 UTC\" coerce_numeric_date(as.numeric(Sys.Date()))    # days since epoch #> [1] \"2025-09-12 UTC\" coerce_numeric_date(\"2025-09-05 14:30:00\")     # ISO8601 string #> [1] \"2025-09-05 14:30:00 UTC\" coerce_numeric_date(\"1736160000\")              # epoch seconds as string #> [1] \"2025-01-06 10:40:00 UTC\""},{"path":"/reference/create_user_account_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New User Account. — create_user_account_base","title":"Create a New User Account. — create_user_account_base","text":"Initializes `MainAccount` object saves using configured backend.","code":""},{"path":"/reference/create_user_account_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New User Account. — create_user_account_base","text":"","code":"create_user_account_base(   user_id,   base_dir = Sys.getenv(\"ACCOUNT_BASE_DIR\", \"user_accounts\"),   initial_balance = 0 )"},{"path":"/reference/create_user_account_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New User Account. — create_user_account_base","text":"user_id validated user ID (must contain letters, digits, underscores). base_dir Deprecated. Use ACCOUNT_BACKEND instead. initial_balance Optional numeric value specifying starting balance main account. Default `0`.","code":""},{"path":"/reference/create_user_account_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New User Account. — create_user_account_base","text":"Invisibly returns `TRUE` account created successfully.","code":""},{"path":"/reference/file_exists_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a User File Exists on the Local File System — file_exists_file","title":"Check if a User File Exists on the Local File System — file_exists_file","text":"function checks whether specified file exists user's directory local file system. plugin `\"file\"` backend, used via generic interface `file_exists_user_file()`.","code":""},{"path":"/reference/file_exists_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a User File Exists on the Local File System — file_exists_file","text":"","code":"file_exists_file(user_id, file_name, base_dir)"},{"path":"/reference/file_exists_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a User File Exists on the Local File System — file_exists_file","text":"user_id string specifying unique user ID. file_name name file check (e.g., `\"account_tree.Rds\"`). base_dir root directory containing user folders.","code":""},{"path":"/reference/file_exists_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a User File Exists on the Local File System — file_exists_file","text":"Logical `TRUE` file exists, `FALSE` otherwise.","code":""},{"path":[]},{"path":"/reference/file_exists_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a User File Exists on the Local File System — file_exists_file","text":"","code":"if (FALSE) { # \\dontrun{ file_exists_file(\"user123\", \"account_tree.Rds\", base_dir = \"user_data\") } # }"},{"path":"/reference/file_exists_mongo.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a User File Exists in MongoDB — file_exists_mongo","title":"Check if a User File Exists in MongoDB — file_exists_mongo","text":"function checks whether specific file exists user MongoDB collection. uses cached connection (creates new one) via `get_mongo_conn()` queries documents matching user ID file name.","code":""},{"path":"/reference/file_exists_mongo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a User File Exists in MongoDB — file_exists_mongo","text":"","code":"file_exists_mongo(   user_id,   file_name,   db,   uri,   collection = Sys.getenv(\"ACCOUNT_BASE_DIR\", \"user_accounts\") )"},{"path":"/reference/file_exists_mongo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a User File Exists in MongoDB — file_exists_mongo","text":"user_id string specifying unique user ID. file_name name file check (e.g., `\"account_tree.Rds\"`). db MongoDB database name. uri MongoDB connection URI. collection MongoDB collection name. Defaults `\"accounts\"`.","code":""},{"path":"/reference/file_exists_mongo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a User File Exists in MongoDB — file_exists_mongo","text":"Logical `TRUE` file exists, `FALSE` otherwise.","code":""},{"path":[]},{"path":"/reference/file_exists_mongo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a User File Exists in MongoDB — file_exists_mongo","text":"","code":"if (FALSE) { # \\dontrun{ # Check if the user has the file in MongoDB file_exists_mongo(\"user123\", \"account_tree.Rds\",                   db = \"mydb\", uri = \"mongodb://localhost:27017\") } # }"},{"path":"/reference/get_mongo_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Create a MongoDB Connection — get_mongo_conn","title":"Get or Create a MongoDB Connection — get_mongo_conn","text":"function retrieves cached MongoDB connection given database collection. connection exist, creates new one using `mongolite` package stores private environment reuse.","code":""},{"path":"/reference/get_mongo_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Create a MongoDB Connection — get_mongo_conn","text":"","code":"get_mongo_conn(db, collection, uri)"},{"path":"/reference/get_mongo_conn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Create a MongoDB Connection — get_mongo_conn","text":"db string specifying MongoDB database name. collection string specifying MongoDB collection name. uri string specifying MongoDB connection URI.","code":""},{"path":"/reference/get_mongo_conn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or Create a MongoDB Connection — get_mongo_conn","text":"`mongolite::mongo` connection object.","code":""},{"path":[]},{"path":"/reference/get_mongo_conn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Create a MongoDB Connection — get_mongo_conn","text":"","code":"if (FALSE) { # \\dontrun{ # Connect to the \"users\" collection in the \"mydb\" database conn <- get_mongo_conn(\"mydb\", \"users\", \"mongodb://localhost:27017\") conn$find('{}')  # Query all documents } # }"},{"path":"/reference/is_valid_user_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a User ID Format — is_valid_user_id","title":"Validate a User ID Format — is_valid_user_id","text":"Checks whether given user ID valid safe use file paths. valid user ID consists alphanumeric characters underscores. function used prevent unsafe input lead directory traversal attacks file system misuse.","code":""},{"path":"/reference/is_valid_user_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a User ID Format — is_valid_user_id","text":"","code":"is_valid_user_id(user_id)"},{"path":"/reference/is_valid_user_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a User ID Format — is_valid_user_id","text":"user_id character string representing user ID.","code":""},{"path":"/reference/is_valid_user_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a User ID Format — is_valid_user_id","text":"logical value: `TRUE` user ID valid, `FALSE` otherwise.","code":""},{"path":"/reference/is_valid_user_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a User ID Format — is_valid_user_id","text":"","code":"is_valid_user_id(\"user123\")       # TRUE #> [1] TRUE is_valid_user_id(\"user-abc\")      # FALSE #> [1] TRUE is_valid_user_id(\"../../etc/\")    # FALSE #> [1] FALSE"},{"path":"/reference/issue_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Issue a Signed JWT Token — issue_token","title":"Issue a Signed JWT Token — issue_token","text":"Creates signs JSON Web Token (JWT) using HMAC specified secret. Supports session-based tokens (identified `session_id`) expiry-based tokens (`exp` claim).","code":""},{"path":"/reference/issue_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Issue a Signed JWT Token — issue_token","text":"","code":"issue_token(   type = \"session\",   secret,   size = 256,   header = NULL,   iss = NULL,   sub = NULL,   aud = NULL,   exp = NULL,   nbf = NULL,   iat = Sys.time(),   jti = NULL,   session_id = NULL,   ... )"},{"path":"/reference/issue_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Issue a Signed JWT Token — issue_token","text":"type Character string indicating token type. Either `\"session\"` (default) `\"expiry\"`. secret character raw vector used HMAC secret signing. size Integer, SHA2 bitsize (256, 384, 512). Defaults `256`. header Optional named list additional header fields JWT. iss (Issuer) Claim, optional. sub (Subject) Claim, optional. aud (Audience) Claim, optional. exp (Expiration Time) Claim, required `\"expiry\"` tokens. POSIXct time numeric epoch seconds. nbf () Claim, optional. iat (Issued ) Claim, defaults `Sys.time()`. jti (JWT ID) Claim, optional. session_id string identifying session (required `\"session\"` tokens). ... Additional custom claims include JWT payload.","code":""},{"path":"/reference/issue_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Issue a Signed JWT Token — issue_token","text":"signed JWT token (character string).","code":""},{"path":"/reference/issue_token.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Issue a Signed JWT Token — issue_token","text":"session-based tokens, `session_id` must provided. server responsible validating referenced session active. expiry-based tokens, `exp` claim must provided. token automatically rejected [jose::jwt_decode_hmac()] expired.","code":""},{"path":[]},{"path":"/reference/issue_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Issue a Signed JWT Token — issue_token","text":"","code":"library(jose) #> Loading required package: openssl #> Linking to: OpenSSL 3.0.13 30 Jan 2024  # Session-based token tok1 <- issue_token(   secret = \"supersecret\",   sub = \"user123\",   session_id = \"sess_456\" )  # Expiry-based token (valid for 1 hour) tok2 <- issue_token(   type = \"expiry\",   secret = \"supersecret\",   sub = \"user123\",   exp = Sys.time() + 3600 )  # Verification (will fail automatically if expired) verify_token(tok2, secret = \"supersecret\") #> $sub #> [1] \"user123\" #>  #> $exp #> [1] 1757675004 #>  #> $iat #> [1] 1757671404 #>  #> $token_type #> [1] \"expiry\" #>"},{"path":"/reference/load_from_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a User File from Local Filesystem — load_from_file","title":"Load a User File from Local Filesystem — load_from_file","text":"Loads user-specific file (e.g., account tree, lock file) localfilesystem.file format determined automatically based extension.","code":""},{"path":"/reference/load_from_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a User File from Local Filesystem — load_from_file","text":"","code":"load_from_file(user_id, file_name, base_dir)"},{"path":"/reference/load_from_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a User File from Local Filesystem — load_from_file","text":"user_id character string representing user's unique identifier. file_name name file load (e.g., `\"account_tree.Rds\"`, `\"data.json\"`). base_dir base directory user data stored. point top-level folder containing user subdirectories.","code":""},{"path":"/reference/load_from_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a User File from Local Filesystem — load_from_file","text":"loaded object, parsed according file extension: `.Rds` files loaded readRDS() `.json` files loaded jsonlite::fromJSON() `.csv` files loaded read.csv() depedencies:","code":""},{"path":"/reference/load_from_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a User File from Local Filesystem — load_from_file","text":"function intended called indirectly generic loader load_user_file, determines appropriate backend use. file extension determines parser, unsupported file types raise error.","code":""},{"path":[]},{"path":"/reference/load_from_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a User File from Local Filesystem — load_from_file","text":"","code":"if (FALSE) { # \\dontrun{   load_from_file(\"user123\", \"account_tree.Rds\", base_dir = \"user_accounts\") } # }"},{"path":"/reference/load_from_mongo.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a File from MongoDB — load_from_mongo","title":"Load a File from MongoDB — load_from_mongo","text":"function loads previously saved R object MongoDB collection. retrieves document matching specific user ID file name, unserializes stored raw data back R object.","code":""},{"path":"/reference/load_from_mongo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a File from MongoDB — load_from_mongo","text":"","code":"load_from_mongo(   user_id,   file_name,   db,   uri,   collection = Sys.getenv(\"ACCOUNT_BASE_DIR\", \"user_accounts\") )"},{"path":"/reference/load_from_mongo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a File from MongoDB — load_from_mongo","text":"user_id string specifying unique user ID. file_name name file load (e.g., `\"account_tree.Rds\"`). db MongoDB database name. uri MongoDB connection URI. collection MongoDB collection name. Defaults `\"accounts\"`.","code":""},{"path":"/reference/load_from_mongo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a File from MongoDB — load_from_mongo","text":"R object stored MongoDB, `NULL` matching file found.","code":""},{"path":[]},{"path":"/reference/load_from_mongo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a File from MongoDB — load_from_mongo","text":"","code":"if (FALSE) { # \\dontrun{ # Load a saved object for a user obj <- load_from_mongo(   user_id = \"user123\",   file_name = \"account_tree.Rds\",   db = \"mydb\",   uri = \"mongodb://localhost:27017\" ) } # }"},{"path":"/reference/load_user_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a User's File from the Storage Backend — load_user_file","title":"Load a User's File from the Storage Backend — load_user_file","text":"Loads file associated user configured storage backend. backend determined `ACCOUNT_BACKEND` environment variable (default `\"file\"` local storage), supports loading various file types like `.Rds`, `.json`, `.csv` via appropriate plugin.","code":""},{"path":"/reference/load_user_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a User's File from the Storage Backend — load_user_file","text":"","code":"load_user_file(user_id, file_name = \"account_tree.Rds\")"},{"path":"/reference/load_user_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a User's File from the Storage Backend — load_user_file","text":"user_id string representing unique user ID. file_name name file load (e.g., `\"account_tree.Rds\"`). base name relative user-specific storage root.","code":""},{"path":"/reference/load_user_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a User's File from the Storage Backend — load_user_file","text":"R object loaded specified file.","code":""},{"path":"/reference/load_user_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a User's File from the Storage Backend — load_user_file","text":"function provides unified interface load user-specific data, regardless stored (e.g., local file system, cloud, database). actual loading logic delegated plugin based backend, configured using environment variables. function constructs appropriate arguments selected backend using `build_plugin_args()` dispatches call using `.call()`. file type determines file parsed (e.g., `.Rds` via `readRDS()`, `.json` via `jsonlite::fromJSON()`).","code":""},{"path":[]},{"path":"/reference/load_user_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a User's File from the Storage Backend — load_user_file","text":"","code":"if (FALSE) { # \\dontrun{ Sys.setenv(ACCOUNT_BACKEND = \"file\") load_user_file(\"user123\", \"account_tree.Rds\") load_user_file(\"user123\", \"transactions.csv\") } # }"},{"path":"/reference/minimal_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Minimal Version of the Account Tree — minimal_tree","title":"Get a Minimal Version of the Account Tree — minimal_tree","text":"Retrieves lightweight representation account object, containing essential details. particularly useful front-end initialization, avoids fetching large volumes data making multiple batch requests.","code":""},{"path":"/reference/minimal_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Minimal Version of the Account Tree — minimal_tree","text":"","code":"minimal_tree(account, n = 30, daterange = c(Sys.Date() - 365000, Sys.Date()))"},{"path":"/reference/minimal_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Minimal Version of the Account Tree — minimal_tree","text":"account R6 account object finman package. n Integer. number days within compute amount due. Default 30. daterange length-2 Date vector specifying date range statistics (spending, total due, etc.). Default 1,000 years ago today (c(Sys.Date() - 365000, Sys.Date())).","code":""},{"path":"/reference/minimal_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Minimal Version of the Account Tree — minimal_tree","text":"list containing: name – Account name. account_uuid – Account unique identifier. balance – Current account balance. transactions – Transaction history. child_accounts_list – Summary list child accounts       (name UUID). total_balance – Total balance including child accounts. total_due – Total amount due including child accounts. compute_total_due_within_n_days – Amount due within       specified period. spending, total_income, allocated_amount,           income_utilization, walking_amount_due,           walking_balance – Computed statistics specified           date range. parent_uuid, allocation, account_status,           priority – Additional details ChildAccount objects. due_date, fixed_amount, account_type,           account_freq, account_periods – Additional details           GrandchildAccount objects. child_accounts – Recursively minimal child account trees.","code":""},{"path":"/reference/minimal_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a Minimal Version of the Account Tree — minimal_tree","text":"","code":"if (FALSE) { # \\dontrun{ library(finman)  # Create main account main_account <- MainAccount$new(\"Main\")  # Add tier 2 accounts main_account$add_child_account(   ChildAccount$new(\"Needs\", allocation = 0.55)) main_account$add_child_account(   ChildAccount$new(\"Goals\", allocation = 0.25)) main_account$add_child_account(   ChildAccount$new(\"Debt Repayment\", allocation = 0.20))  # Add tier 3 accounts (example: Needs -> Rent) main_account$child_accounts$`Needs`$add_child_account(   GrandchildAccount$new(     \"Rent\",     allocation = 0.20,     fixed_amount = 7500,     account_type = \"Bill\",     freq = 30,     due_date = dmy(\"28-1-2025\")   ) )  # Deposit and withdraw main_account$deposit(10000, \"TXN001\", \"Mpesa\") main_account$find_account(\"Rent\")$withdraw(200, \"TXN005\", \"Cash\")  # Get minimal account tree tree <- minimal_tree(main_account) } # }"},{"path":"/reference/remove_account.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an Account (Main or Sub-Account) — remove_account","title":"Remove an Account (Main or Sub-Account) — remove_account","text":"Deletes account account tree. uuid matches main/root account, user's entire account file removed. Otherwise, function locates target account within tree removes parent.","code":""},{"path":"/reference/remove_account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an Account (Main or Sub-Account) — remove_account","text":"","code":"remove_account(tree, user_id, uuid)"},{"path":"/reference/remove_account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an Account (Main or Sub-Account) — remove_account","text":"tree R6 account tree object (e.g., created via MainAccount$new()). user_id Character string. unique identifier user owns account tree. Used locate delete user's persisted file. uuid Character string. UUID account removed.","code":""},{"path":"/reference/remove_account.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove an Account (Main or Sub-Account) — remove_account","text":"Logical TRUE account successfully removed.   Throws error account parent found.","code":""},{"path":"/reference/remove_account.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove an Account (Main or Sub-Account) — remove_account","text":"- UUID corresponds main/root account: user's \"account_tree.Rds\" file deleted           persistent storage. - UUID corresponds sub-account: target account located via           tree$find_account_by_uuid(uuid). parent identified, child removed           parent$child_accounts. updated tree saved back persistent storage           save_user_file().","code":""},{"path":[]},{"path":"/reference/remove_account.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove an Account (Main or Sub-Account) — remove_account","text":"","code":"if (FALSE) { # \\dontrun{ library(finman)  # Create a main account main <- MainAccount$new(\"Main\")  # Add a sub-account needs <- ChildAccount$new(\"Needs\", allocation = 0.5) main$add_child_account(needs)  # Add a grandchild account rent <- GrandchildAccount$new(   \"Rent\", allocation = 0.3, fixed_amount = 7500,   account_type = \"Bill\", freq = 30, due_date = Sys.Date() + 30 ) needs$add_child_account(rent)  # Persist the account tree save_user_file(\"user123\", main, \"account_tree.Rds\")  # Remove the grandchild account by uuid remove_account(main, \"user123\", rent$uuid)  # Remove the main account (deletes the file) remove_account(main, \"user123\", main$uuid) } # }"},{"path":"/reference/remove_from_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a File from the Local File System — remove_from_file","title":"Remove a File from the Local File System — remove_from_file","text":"Removes specified file user's directory local file system. plugin `\"file\"` backend, used via generic interface `remove_user_file()`.","code":""},{"path":"/reference/remove_from_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a File from the Local File System — remove_from_file","text":"","code":"remove_from_file(user_id, file_name, base_dir)"},{"path":"/reference/remove_from_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a File from the Local File System — remove_from_file","text":"user_id string specifying unique user ID. file_name name file remove (e.g., `\"account_tree.Rds\"`). base_dir root directory containing user folders. full path constructed `file.path(base_dir, user_id, file_name)`.","code":""},{"path":"/reference/remove_from_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a File from the Local File System — remove_from_file","text":"Returns `TRUE` file successfully removed, `FALSE`   file exist removed. warning issued   file found.","code":""},{"path":"/reference/remove_from_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove a File from the Local File System — remove_from_file","text":"file exist, warning issued error thrown.","code":""},{"path":[]},{"path":"/reference/remove_from_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a File from the Local File System — remove_from_file","text":"","code":"if (FALSE) { # \\dontrun{ remove_from_file(\"user123\", \"account_tree.Rds\", base_dir = \"user_data\") } # }"},{"path":"/reference/remove_from_mongo.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a File from MongoDB — remove_from_mongo","title":"Remove a File from MongoDB — remove_from_mongo","text":"function removes specified file (document) MongoDB collection based user ID file name. matching document found, returns `FALSE` without throwing error.","code":""},{"path":"/reference/remove_from_mongo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a File from MongoDB — remove_from_mongo","text":"","code":"remove_from_mongo(   user_id,   file_name,   db,   uri,   collection = Sys.getenv(\"ACCOUNT_BASE_DIR\", \"user_accounts\") )"},{"path":"/reference/remove_from_mongo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a File from MongoDB — remove_from_mongo","text":"user_id string specifying unique user ID. file_name name file remove (e.g., `\"account_tree.Rds\"`). db MongoDB database name. uri MongoDB connection URI. collection MongoDB collection name. Defaults `\"accounts\"`.","code":""},{"path":"/reference/remove_from_mongo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a File from MongoDB — remove_from_mongo","text":"Logical `TRUE` file successfully removed, `FALSE`   matching file found.","code":""},{"path":[]},{"path":"/reference/remove_from_mongo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a File from MongoDB — remove_from_mongo","text":"","code":"if (FALSE) { # \\dontrun{ # Remove a file from MongoDB removed <- remove_from_mongo(   user_id = \"user123\",   file_name = \"account_tree.Rds\",   db = \"mydb\",   uri = \"mongodb://localhost:27017\" ) if (removed) message(\"File removed!\") else message(\"File not found.\") } # }"},{"path":"/reference/remove_user_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a User File via Configured Storage Backend — remove_user_file","title":"Remove a User File via Configured Storage Backend — remove_user_file","text":"Deletes specific user file using appropriate backend plugin, based `ACCOUNT_BACKEND` environment variable. function abstracts file removal logic, allowing different storage systems handle file deletion (e.g., local file system, MongoDB, Google Drive).","code":""},{"path":"/reference/remove_user_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a User File via Configured Storage Backend — remove_user_file","text":"","code":"remove_user_file(user_id, file_name = \"account_tree.Rds\")"},{"path":"/reference/remove_user_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a User File via Configured Storage Backend — remove_user_file","text":"user_id character string representing user ID. file_name Name file remove. Defaults `\"account_tree.Rds\"`.","code":""},{"path":"/reference/remove_user_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a User File via Configured Storage Backend — remove_user_file","text":"Invisibly returns `NULL`. Issues warning file   exist, throws error backend plugin found.","code":""},{"path":"/reference/remove_user_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove a User File via Configured Storage Backend — remove_user_file","text":"actual removal behavior implemented selected   backend plugin (e.g., `remove_from_file`, `remove_from_gdrive`, etc.).   Configuration controlled via environment variables like   `ACCOUNT_BACKEND` `ACCOUNT_BASE_DIR`.","code":""},{"path":[]},{"path":"/reference/remove_user_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a User File via Configured Storage Backend — remove_user_file","text":"","code":"if (FALSE) { # \\dontrun{   remove_user_file(\"user123\")  # Deletes \"account_tree.Rds\"   remove_user_file(\"user123\", file_name = \"data.json\") } # }"},{"path":"/reference/retry_read_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Retry reading RDS file — retry_read_rds","title":"Retry reading RDS file — retry_read_rds","text":"Attempts read RDS file multiple times failing.","code":""},{"path":"/reference/retry_read_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retry reading RDS file — retry_read_rds","text":"","code":"retry_read_rds(file, max_tries = 3, delay = 0.3)"},{"path":"/reference/retry_read_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retry reading RDS file — retry_read_rds","text":"file Path RDS file. max_tries Number retry attempts (default = 3). delay Delay retries seconds (default = 0.3).","code":""},{"path":"/reference/retry_read_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retry reading RDS file — retry_read_rds","text":"object read RDS file.","code":""},{"path":"/reference/retry_save_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Retry saveRDS with Delay and Limited Attempts — retry_save_rds","title":"Retry saveRDS with Delay and Limited Attempts — retry_save_rds","text":"Attempts save R object file using `saveRDS()`, retrying error maximum number tries. useful scenarios high concurrency potential file system contention, APIs parallel processes.","code":""},{"path":"/reference/retry_save_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retry saveRDS with Delay and Limited Attempts — retry_save_rds","text":"","code":"retry_save_rds(object, file, max_tries = 3, delay = 0.3)"},{"path":"/reference/retry_save_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retry saveRDS with Delay and Limited Attempts — retry_save_rds","text":"object R object save. file character string naming file save R object . max_tries Maximum number attempts giving . Default 3. delay Time seconds wait attempts. Default 0.3.","code":""},{"path":"/reference/retry_save_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retry saveRDS with Delay and Limited Attempts — retry_save_rds","text":"`invisible(TRUE)` successful. attempts fail, error raised.","code":""},{"path":"/reference/retry_save_rds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retry saveRDS with Delay and Limited Attempts — retry_save_rds","text":"","code":"if (FALSE) { # \\dontrun{ retry_save_rds(my_data, \"config.rds\") } # }"},{"path":"/reference/safe_parse_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely Parse Flexible Date Inputs — safe_parse_date","title":"Safely Parse Flexible Date Inputs — safe_parse_date","text":"helper attempts robustly coerce various date-like inputs standardized `POSIXct` object. designed user-facing APIs dates may arrive different formats (character, `Date`, `POSIXct`).","code":""},{"path":"/reference/safe_parse_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely Parse Flexible Date Inputs — safe_parse_date","text":"","code":"safe_parse_date(x, tz = \"UTC\")"},{"path":"/reference/safe_parse_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely Parse Flexible Date Inputs — safe_parse_date","text":"x date input. Accepts: * `POSIXct`: returned unchanged * `Date`: coerced `POSIXct` * `character`: parsed multiple orders (`ymd`, `dmy`, `mdy` optional hour-minute-second extensions) tz Timezone apply parsing (default `\"UTC\"`).","code":""},{"path":"/reference/safe_parse_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely Parse Flexible Date Inputs — safe_parse_date","text":"`POSIXct` object representing parsed date.","code":""},{"path":"/reference/safe_parse_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safely Parse Flexible Date Inputs — safe_parse_date","text":"Supported formats include common ISO ambiguous styles, example: - `\"2025-11-16\"` → `2025-11-16 UTC` - `\"11-16-2025\"` → `2025-11-16 UTC` - `\"16/11/2025 14:30\"` → `2025-11-16 14:30 UTC` - `\"Nov 16 2025 14:30:15\"` → `2025-11-16 14:30:15 UTC` vector inputs provided, first element parsed. `NULL`, empty, `NA`, current system time returned.","code":""},{"path":[]},{"path":"/reference/safe_parse_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely Parse Flexible Date Inputs — safe_parse_date","text":"","code":"safe_parse_date(\"2025-11-16\") #> [1] \"2025-11-16 UTC\" safe_parse_date(\"11/16/2025 14:30\") #> [1] \"2025-11-16 14:30:00 UTC\" safe_parse_date(Sys.Date()) #> [1] \"2025-09-12 UTC\" safe_parse_date(Sys.time()) #> [1] \"2025-09-12 10:03:25 UTC\""},{"path":"/reference/save_to_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a User's File to the Local File System — save_to_file","title":"Save a User's File to the Local File System — save_to_file","text":"Saves R object user-specific directory local file system using format inferred file extension. Supported formats include `.Rds`, `.json`, `.csv`, `.lock`.","code":""},{"path":"/reference/save_to_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a User's File to the Local File System — save_to_file","text":"","code":"save_to_file(user_id, object, file_name, base_dir)"},{"path":"/reference/save_to_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a User's File to the Local File System — save_to_file","text":"user_id character string specifying unique user ID. object R object save. can list, data frame, atomic vector, serializable R object. file_name name file save, including extension (e.g., `\"account_tree.Rds\"`, `\"transactions.json\"`, `\"session.lock\"`). base_dir root directory user-specific folders stored. object saved `file.path(base_dir, user_id, file_name)`.","code":""},{"path":"/reference/save_to_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a User's File to the Local File System — save_to_file","text":"Invisibly returns path file saving.","code":""},{"path":"/reference/save_to_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a User's File to the Local File System — save_to_file","text":"function serves `\"file\"` backend plugin saving user data. usually called via `save_user_file()` supports automatic directory creation target user. file format determined extension `file_name`: - **.Rds** — Saves object using `saveRDS()`. - **.json** — Saves object using `jsonlite::write_json()`   `auto_unbox = TRUE`. - **.csv** — Saves using `write.csv()` `row.names = FALSE`. - **.lock** — Treated text file; `writeLines()` used   assumption `object` string scalar. file extension recognized, function falls back serializing object `serialize()` writes binary. warning issued notify developer suggest extending plugin handle custom file types explicitly.","code":""},{"path":"/reference/save_to_file.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Save a User's File to the Local File System — save_to_file","text":"function intended internal use within plugin system. application-level usage, prefer calling `save_user_file()`.","code":""},{"path":[]},{"path":"/reference/save_to_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a User's File to the Local File System — save_to_file","text":"","code":"if (FALSE) { # \\dontrun{ save_to_file(\"user123\", list(name = \"Alice\"), \"profile.json\",              base_dir = \"data\")  save_to_file(\"user123\", data.frame(income = c(100, 200)), \"income.csv\",              base_dir = \"data\")  save_to_file(\"user123\", MainAccount$new(name = \"Main\"), \"account_tree.Rds\",              base_dir = \"data\")  # Save a lock file save_to_file(\"user123\", Sys.getpid(), \"account_tree.lock\",              base_dir = \"data\")  # Save unknown file format (e.g., .yaml) — triggers warning save_to_file(\"user123\", list(config = TRUE), \"custom.yaml\",              base_dir = \"data\") } # }"},{"path":"/reference/save_to_mongo.html","id":null,"dir":"Reference","previous_headings":"","what":"Save an R Object to MongoDB — save_to_mongo","title":"Save an R Object to MongoDB — save_to_mongo","text":"function saves R object MongoDB collection specific user. document user ID file name already exists, updates data field. Otherwise, inserts new document metadata.","code":""},{"path":"/reference/save_to_mongo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save an R Object to MongoDB — save_to_mongo","text":"","code":"save_to_mongo(   user_id,   object,   file_name,   db,   uri,   collection = Sys.getenv(\"ACCOUNT_BASE_DIR\", \"user_accounts\") )"},{"path":"/reference/save_to_mongo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save an R Object to MongoDB — save_to_mongo","text":"user_id string specifying unique user ID. object R object save. file_name name file save (e.g., `\"account_tree.Rds\"`). db MongoDB database name. uri MongoDB connection URI. collection MongoDB collection name. Defaults `\"user_accounts\"`.","code":""},{"path":"/reference/save_to_mongo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save an R Object to MongoDB — save_to_mongo","text":"Invisibly returns `NULL`. object stored MongoDB.","code":""},{"path":[]},{"path":[]},{"path":"/reference/save_user_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a User-Specific File via Plugin Backend — save_user_file","title":"Save a User-Specific File via Plugin Backend — save_user_file","text":"Saves R object user-specific location using appropriate plugin backend (e.g., `\"file\"`, `\"mongo\"`, `\"gdrive\"`). format destination determined backend file extension.","code":""},{"path":"/reference/save_user_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a User-Specific File via Plugin Backend — save_user_file","text":"","code":"save_user_file(user_id, object, file_name = \"account_tree.Rds\")"},{"path":"/reference/save_user_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a User-Specific File via Plugin Backend — save_user_file","text":"user_id character string representing unique user ID. object R object save. can R object appropriate file extension used (e.g., list, data.frame, custom class). file_name file name, including extension (e.g., `\"account_tree.Rds\"`, `\"meta.json\"`, `\"transactions.csv\"`, `\"account_tree.lock\"`).","code":""},{"path":"/reference/save_user_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a User-Specific File via Plugin Backend — save_user_file","text":"return value. function invoked side effect persisting file via selected backend plugin.","code":""},{"path":"/reference/save_user_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a User-Specific File via Plugin Backend — save_user_file","text":"function acts plugin launcher saving user-related data, including account trees (`.Rds`), transaction records (`.csv`), metadata (`.json`), lockfiles (`.lock`). delegates actual save operation corresponding backend plugin function (e.g., `save_to_file()`). appropriate plugin selected based `ACCOUNT_BACKEND` environment variable (default: `\"file\"`). function builds arguments required plugin using [build_plugin_args()], delegates save operation. error raised suitable save plugin found.","code":""},{"path":[]},{"path":"/reference/save_user_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a User-Specific File via Plugin Backend — save_user_file","text":"","code":"if (FALSE) { # \\dontrun{   # Save an account tree to .Rds   save_user_file(\"user123\", MainAccount$new(name = \"Main\"))    # Save a data frame to CSV   save_user_file(\"user123\", data.frame(a = 1:3), \"transactions.csv\")    # Save a lock file (PID as a number)   save_user_file(\"user123\", Sys.getpid(), \"account_tree.lock\") } # }"},{"path":"/reference/user_file_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check If a User File Exists via Configured Storage Backend — user_file_exists","title":"Check If a User File Exists via Configured Storage Backend — user_file_exists","text":"Checks whether specific file (e.g., `account_tree.Rds`, lock file, etc.) exists given user delegating backend-specific plugin.","code":""},{"path":"/reference/user_file_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check If a User File Exists via Configured Storage Backend — user_file_exists","text":"","code":"user_file_exists(user_id, file_name = \"account_tree.Rds\")"},{"path":"/reference/user_file_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check If a User File Exists via Configured Storage Backend — user_file_exists","text":"user_id string representing unique user ID. file_name Name file check, relative user's folder. Defaults `\"account_tree.Rds\"`.","code":""},{"path":"/reference/user_file_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check If a User File Exists via Configured Storage Backend — user_file_exists","text":"logical value: `TRUE` file exists, `FALSE` otherwise.","code":""},{"path":"/reference/user_file_exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check If a User File Exists via Configured Storage Backend — user_file_exists","text":"function supports checking files stored different storage backends local disk, MongoDB, Google Drive, etc., configured via `ACCOUNT_BACKEND` environment variable.","code":""},{"path":"/reference/user_file_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check If a User File Exists via Configured Storage Backend — user_file_exists","text":"","code":"if (FALSE) { # \\dontrun{   user_file_exists(\"user123\") # Checks account_tree.Rds by default   user_file_exists(\"user123\", file_name = \"account_tree.lock\") } # }"},{"path":"/reference/verify_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Decode and Verify a JWT Token — verify_token","title":"Decode and Verify a JWT Token — verify_token","text":"Attempts decode verify JSON Web Token (JWT) using HMAC secret. Returns decoded payload valid, `NULL` verification fails.","code":""},{"path":"/reference/verify_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decode and Verify a JWT Token — verify_token","text":"","code":"verify_token(token, secret)"},{"path":"/reference/verify_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decode and Verify a JWT Token — verify_token","text":"token character string representing JWT token (e.g., HTTP header). secret raw character vector used HMAC secret verification. Defaults global `secret_key` variable, securely  set (e.g., via `Sys.getenv(\"JWT_SECRET\")`).","code":""},{"path":"/reference/verify_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decode and Verify a JWT Token — verify_token","text":"list representing decoded JWT payload token valid;         otherwise, `NULL` decoding fails token invalid/expired.","code":""},{"path":[]},{"path":"/reference/verify_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decode and Verify a JWT Token — verify_token","text":"","code":"if (FALSE) { # \\dontrun{ library(jose) token <- jwt_encode_hmac(list(user_id = \"abc123\"), secret = charToRaw(\"my-secret\")) verify_token(token, secret = charToRaw(\"my-secret\")) } # }"},{"path":"/reference/with_account_lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire a Lock for a User's Account Tree — with_account_lock","title":"Acquire a Lock for a User's Account Tree — with_account_lock","text":"Provides exclusive access user's account tree across different storage backends (e.g., local files, MongoDB, Google Drive). function ensures one process/thread can access modify user's account tree time. Lock acquisition release delegated appropriate backend plugin.","code":""},{"path":"/reference/with_account_lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire a Lock for a User's Account Tree — with_account_lock","text":"","code":"with_account_lock(   user_id,   expr,   file_name = \"account_tree.Rds\",   timeout = 1800 )"},{"path":"/reference/with_account_lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire a Lock for a User's Account Tree — with_account_lock","text":"user_id user ID whose account tree locked. expr expression evaluate lock acquired. file_name Name account file lock (default: \"account_tree.Rds\"). used derive corresponding lockfile (e.g., account_tree.lock). timeout Maximum time seconds wait lock failing. Default 1800 seconds (30 minutes).","code":""},{"path":"/reference/with_account_lock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acquire a Lock for a User's Account Tree — with_account_lock","text":"result evaluating expr lock acquired.","code":""},{"path":"/reference/with_account_lock.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acquire a Lock for a User's Account Tree — with_account_lock","text":"locking mechanism backend-dependent: File backend: temporary .lock file created   user's directory. processes wait file removed. MongoDB backend: lock flag set document   associated given file_name. processes poll   lock released. backends (e.g., Google Drive): behavior defined   respective plugin. function designed backend-agnostic; automatically dispatches correct lock plugin based ACCOUNT_BACKEND environment variable.","code":""},{"path":"/reference/with_account_lock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acquire a Lock for a User's Account Tree — with_account_lock","text":"","code":"if (FALSE) { # \\dontrun{ # Run a critical section safely under a lock result <- with_account_lock(\"user123\", {   account <- load_user_file(\"user123\", \"account_tree.Rds\")   account$balance <- account$balance + 100   save_user_file(\"user123\", account, \"account_tree.Rds\")   account$balance }) } # }"},{"path":"/reference/with_lock_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire a File-Based Lock for a User's Account File — with_lock_file","title":"Acquire a File-Based Lock for a User's Account File — with_lock_file","text":"Provides exclusive access user's account file using file-based lock. temporary lock file created user's directory signal account file use. processes wait lock file removed timeout reached.","code":""},{"path":"/reference/with_lock_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire a File-Based Lock for a User's Account File — with_lock_file","text":"","code":"with_lock_file(   user_id,   expr,   base_dir,   file_name = \"account_tree.Rds\",   timeout = 1800 )"},{"path":"/reference/with_lock_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire a File-Based Lock for a User's Account File — with_lock_file","text":"user_id user ID whose account file locked. expr expression evaluate lock acquired. base_dir Base directory user files stored. file_name Name account file lock (default: \"account_tree.Rds\"). lock file automatically derived replacing extension .lock, e.g., \"account_tree.lock\". timeout Maximum time seconds wait lock failing. Default 1800 seconds (30 minutes).","code":""},{"path":"/reference/with_lock_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acquire a File-Based Lock for a User's Account File — with_lock_file","text":"result evaluating expr lock acquired.","code":""},{"path":"/reference/with_lock_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acquire a File-Based Lock for a User's Account File — with_lock_file","text":"lock implemented creating file base name file_name, .lock extension. lock file already exists, function waits removed. process ID locking process written lock file debugging purposes. expression finishes (normally due error), lock file automatically removed via .exit(), ensuring lock released.","code":""},{"path":"/reference/with_lock_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acquire a File-Based Lock for a User's Account File — with_lock_file","text":"","code":"if (FALSE) { # \\dontrun{ # Run a critical section safely under a file lock result <- with_lock_file(\"user123\", {   account <- load_user_file(\"user123\", \"account_tree.Rds\")   account$balance <- account$balance + 50   save_user_file(\"user123\", account, \"account_tree.Rds\")   account$balance }, base_dir = \"/data/accounts\") } # }"},{"path":"/reference/with_lock_mongo.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire a MongoDB-Based Lock for a User's Account Tree — with_lock_mongo","title":"Acquire a MongoDB-Based Lock for a User's Account Tree — with_lock_mongo","text":"Provides exclusive access user's account tree using MongoDB collection locking mechanism. document collection updated atomically indicate account tree locked specific process. processes wait lock released timeout reached.","code":""},{"path":"/reference/with_lock_mongo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire a MongoDB-Based Lock for a User's Account Tree — with_lock_mongo","text":"","code":"with_lock_mongo(   user_id,   expr,   db,   uri,   collection = \"user_accounts\",   file_name = \"account_tree.Rds\",   timeout = 1800 )"},{"path":"/reference/with_lock_mongo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire a MongoDB-Based Lock for a User's Account Tree — with_lock_mongo","text":"user_id user ID whose account tree locked. expr expression evaluate lock acquired. db MongoDB database name. uri MongoDB connection URI. collection collection used store lock metadata. Default \"accounts\". file_name Logical identifier locked resource. Default \"account_tree\". timeout Maximum time seconds wait lock failing. Default 1800 seconds (30 minutes).","code":""},{"path":"/reference/with_lock_mongo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acquire a MongoDB-Based Lock for a User's Account Tree — with_lock_mongo","text":"result evaluating expr lock acquired.","code":""},{"path":"/reference/with_lock_mongo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acquire a MongoDB-Based Lock for a User's Account Tree — with_lock_mongo","text":"lock implemented atomically updating MongoDB document lock = false set lock = true, along process ID timestamp. another process already holds lock, function retries either lock acquired timeout reached. expression finishes (normally due error), lock automatically released via .exit(), ensuring document reset lock = false.","code":""},{"path":"/reference/with_lock_mongo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acquire a MongoDB-Based Lock for a User's Account Tree — with_lock_mongo","text":"","code":"if (FALSE) { # \\dontrun{ # Run a critical section safely under a MongoDB lock result <- with_lock_mongo(   user_id = \"user123\",   expr = {     account <- load_from_mongo(\"user123\", \"account_tree\",                                db = \"mydb\", uri = \"mongodb://localhost\")     account$balance <- account$balance + 100     save_to_mongo(\"user123\", account, \"account_tree\",                   db = \"mydb\", uri = \"mongodb://localhost\")     account$balance   },   db = \"mydb\",   uri = \"mongodb://localhost\" ) } # }"}]
