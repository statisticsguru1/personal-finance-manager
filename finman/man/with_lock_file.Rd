% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{with_lock_file}
\alias{with_lock_file}
\title{Acquire a File-Based Lock for a User's Account File}
\usage{
with_lock_file(
  user_id,
  expr,
  base_dir,
  file_name = "account_tree.Rds",
  timeout = 1800
)
}
\arguments{
\item{user_id}{The user ID whose account file should be locked.}

\item{expr}{An expression to evaluate once the lock has been acquired.}

\item{base_dir}{Base directory where user files are stored.}

\item{file_name}{Name of the account file to lock (default:
\code{"account_tree.Rds"}). The lock file is automatically derived by
replacing the extension with \code{.lock}, e.g.,
\code{"account_tree.lock"}.}

\item{timeout}{Maximum time in seconds to wait for the lock before failing.
Default is 1800 seconds (30 minutes).}
}
\value{
The result of evaluating \code{expr} once the lock is acquired.
}
\description{
Provides exclusive access to a user's account file using a file-based lock.
A temporary lock file is created in the user's directory to signal that the
account file is in use. Other processes wait until this lock file is removed
or a timeout is reached.
}
\details{
The lock is implemented by creating a file with the same base name as
\code{file_name}, but with a \code{.lock} extension.
If the lock file already exists, the function waits until it is removed.
The process ID of the locking process is written to the lock file for
debugging purposes.

When the expression finishes (normally or due to an error), the lock file is
automatically removed via \code{on.exit()}, ensuring the lock is released.
}
\examples{
\dontrun{
# Run a critical section safely under a file lock
result <- with_lock_file("user123", {
  account <- load_user_file("user123", "account_tree.Rds")
  account$balance <- account$balance + 50
  save_user_file("user123", account, "account_tree.Rds")
  account$balance
}, base_dir = "/data/accounts")
}

}
