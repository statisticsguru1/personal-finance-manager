% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{issue_token}
\alias{issue_token}
\title{Issue a Signed JWT Token}
\usage{
issue_token(
  type = "session",
  secret,
  size = 256,
  header = NULL,
  iss = NULL,
  sub = NULL,
  aud = NULL,
  exp = NULL,
  nbf = NULL,
  iat = Sys.time(),
  jti = NULL,
  session_id = NULL,
  ...
)
}
\arguments{
\item{type}{Character string indicating the token type. Either `"session"`
(default) or `"expiry"`.}

\item{secret}{A character or raw vector used as the HMAC secret for signing.}

\item{size}{Integer, the SHA2 bitsize (256, 384, or 512). Defaults to `256`.}

\item{header}{Optional named list with additional header fields for the JWT.}

\item{iss}{(Issuer) Claim, optional.}

\item{sub}{(Subject) Claim, optional.}

\item{aud}{(Audience) Claim, optional.}

\item{exp}{(Expiration Time) Claim, required for `"expiry"` tokens. Should be
a POSIXct time or numeric epoch seconds.}

\item{nbf}{(Not Before) Claim, optional.}

\item{iat}{(Issued At) Claim, defaults to `Sys.time()`.}

\item{jti}{(JWT ID) Claim, optional.}

\item{session_id}{A string identifying the session (required for `"session"`
tokens).}

\item{...}{Additional custom claims to include in the JWT payload.}
}
\value{
A signed JWT token (character string).
}
\description{
Creates and signs a JSON Web Token (JWT) using HMAC with the specified secret.
Supports both session-based tokens (identified by a `session_id`) and
expiry-based tokens (with an `exp` claim).
}
\details{
For session-based tokens, a `session_id` must be provided. The server is
responsible for validating that the referenced session is active.

For expiry-based tokens, an `exp` claim must be provided. The token will be
automatically rejected by [jose::jwt_decode_hmac()] once expired.
}
\examples{
library(jose)

# Session-based token
tok1 <- issue_token(
  secret = "supersecret",
  sub = "user123",
  session_id = "sess_456"
)

# Expiry-based token (valid for 1 hour)
tok2 <- issue_token(
  type = "expiry",
  secret = "supersecret",
  sub = "user123",
  exp = Sys.time() + 3600
)

# Verification (will fail automatically if expired)
verify_token(tok2, secret = "supersecret")

}
\seealso{
[verify_token()], [jose::jwt_encode_hmac()], [jose::jwt_decode_hmac()]
}
