% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/child_account.R
\name{ChildAccount}
\alias{ChildAccount}
\title{ChildAccount Class}
\description{
An extension of the \code{MainAccount} class used to model specialized
sub-accounts such as goals, needs, or debt repayment accounts.
Child accounts inherit all the core functionality of \code{MainAccount}
while adding features like allocation percentage, account status, and
priority levels for fund distribution.
}
\details{
\itemize{
  \item Inherits from \code{MainAccount}.
  \item Can be part of a parent account and participate in fund distribution.
  \item Tracks its own balance, transaction history, and priority for
   receiving funds.
}
}
\section{Methods}{

\describe{
  \item{\code{initialize(name, allocation, status, parent, path,
  priority)}}{
    Constructor method.
  }
  \item{\code{deposit(amount, transaction_number, by, channel, date)}}{
    Overridden deposit method with status check.
  }
  \item{\code{change_status(status)}}{
    Updates the status of the account.
  }
  \item{\code{get_account_status()}}{
    Returns and prints the account's status.
  }
  \item{\code{get_priority()}}{
    Returns the priority level of the account.
  }
  \item{\code{set_priority(priority)}}{
    Sets a new priority level.
  }
}
}

\examples{
library(R6)
library(uuid)
library(tidyverse)
# Create a basic ChildAccount instance
child <- ChildAccount$new(
  name = "Emergency Fund",
  allocation = 0.3,
  priority = 2
)

# Check initial status and priority
child$get_account_status()
child$get_priority()

# Deposit into the child account
child$deposit(
  amount = 1000,
  channel = "Bank Transfer"
)

# Change account status to inactive
child$change_status("inactive")

# Try another deposit (won't proceed if inactive)
child$deposit(
  amount = 500,
  channel = "Bank Transfer"
)

# Close the account after setting balance to zero
child$withdraw(
  amount = child$balance,
  channel = "Transfer to Main"
)
child$change_status("closed")


## ------------------------------------------------
## Method `ChildAccount$new`
## ------------------------------------------------

# Create a basic ChildAccount with default values
acc <- ChildAccount$new(name = "Emergency Fund")

# Create a ChildAccount with custom allocation and priority
acc2 <- ChildAccount$new(
  name = "Education",
  allocation = 0.3,
  status = "active",
  path = "main_account/education",
  priority = 2
)

# View the account status
acc2$get_account_status()

## ------------------------------------------------
## Method `ChildAccount$deposit`
## ------------------------------------------------

# Create an active child account
acc <- ChildAccount$new(name = "Savings", allocation = 0.5)

# Deposit funds into the account
acc$deposit(amount = 100, channel = "Mobile")

# Attempting to deposit into an inactive account
acc$change_status("inactive")
acc$deposit(amount = 50, channel = "Mobile")  # Will not proceed

## ------------------------------------------------
## Method `ChildAccount$change_status`
## ------------------------------------------------

acc <- ChildAccount$new(name = "Emergency Fund", allocation = 0.3)
acc$change_status("inactive")  # Changes status to inactive
acc$change_status("active")    # Re-activates the account

# Attempting to close with non-zero balance triggers error
acc$deposit(100, channel = "Mobile")
\dontrun{
acc$change_status("closed")    # Will raise an error
}

# Withdraw funds then close
acc$withdraw(100, channel = "Transfer")
acc$change_status("closed")    # Successful closure

## ------------------------------------------------
## Method `ChildAccount$get_account_status`
## ------------------------------------------------

acc <- ChildAccount$new(name = "School Fees", allocation = 0.4)
acc$get_account_status()
# Output: "School Fees is active"

## ------------------------------------------------
## Method `ChildAccount$get_priority`
## ------------------------------------------------

acc <- ChildAccount$new(name = "Emergency Fund", priority = 3)
acc$get_priority()
# [1] 3

## ------------------------------------------------
## Method `ChildAccount$set_priority`
## ------------------------------------------------

acc <- ChildAccount$new(name = "Education Fund", priority = 1)
acc$set_priority(5)
# Priority for Education Fund set to 5
}
\seealso{
\code{\link{MainAccount}}
}
\section{Super class}{
\code{\link[finman:MainAccount]{finman::MainAccount}} -> \code{ChildAccount}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{allocation}}{Numeric. Share of distributed income (0-1 scale).}

\item{\code{status}}{Character. Indicates whether the account is "active" or
"closed".}

\item{\code{parent}}{Optional. Reference to the parent account (if hierarchical).}

\item{\code{path}}{Character. Logical path to the account (used for organizing
accounts).}

\item{\code{priority}}{Numeric. Determines order of distribution among children
(higher = more).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ChildAccount-new}{\code{ChildAccount$new()}}
\item \href{#method-ChildAccount-deposit}{\code{ChildAccount$deposit()}}
\item \href{#method-ChildAccount-change_status}{\code{ChildAccount$change_status()}}
\item \href{#method-ChildAccount-get_account_status}{\code{ChildAccount$get_account_status()}}
\item \href{#method-ChildAccount-get_priority}{\code{ChildAccount$get_priority()}}
\item \href{#method-ChildAccount-set_priority}{\code{ChildAccount$set_priority()}}
\item \href{#method-ChildAccount-clone}{\code{ChildAccount$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="add_child_account"><a href='../../finman/html/MainAccount.html#method-MainAccount-add_child_account'><code>finman::MainAccount$add_child_account()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="allocated_amount"><a href='../../finman/html/MainAccount.html#method-MainAccount-allocated_amount'><code>finman::MainAccount$allocated_amount()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="compute_total_balance"><a href='../../finman/html/MainAccount.html#method-MainAccount-compute_total_balance'><code>finman::MainAccount$compute_total_balance()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="compute_total_due"><a href='../../finman/html/MainAccount.html#method-MainAccount-compute_total_due'><code>finman::MainAccount$compute_total_due()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="compute_total_due_within_n_days"><a href='../../finman/html/MainAccount.html#method-MainAccount-compute_total_due_within_n_days'><code>finman::MainAccount$compute_total_due_within_n_days()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="distribute_to_children"><a href='../../finman/html/MainAccount.html#method-MainAccount-distribute_to_children'><code>finman::MainAccount$distribute_to_children()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="find_account"><a href='../../finman/html/MainAccount.html#method-MainAccount-find_account'><code>finman::MainAccount$find_account()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="find_account_by_uuid"><a href='../../finman/html/MainAccount.html#method-MainAccount-find_account_by_uuid'><code>finman::MainAccount$find_account_by_uuid()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="generate_transaction_id"><a href='../../finman/html/MainAccount.html#method-MainAccount-generate_transaction_id'><code>finman::MainAccount$generate_transaction_id()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="get_balance"><a href='../../finman/html/MainAccount.html#method-MainAccount-get_balance'><code>finman::MainAccount$get_balance()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="get_transactions"><a href='../../finman/html/MainAccount.html#method-MainAccount-get_transactions'><code>finman::MainAccount$get_transactions()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="income_utilization"><a href='../../finman/html/MainAccount.html#method-MainAccount-income_utilization'><code>finman::MainAccount$income_utilization()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="is_duplicate_transaction"><a href='../../finman/html/MainAccount.html#method-MainAccount-is_duplicate_transaction'><code>finman::MainAccount$is_duplicate_transaction()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="list_all_accounts"><a href='../../finman/html/MainAccount.html#method-MainAccount-list_all_accounts'><code>finman::MainAccount$list_all_accounts()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="list_child_accounts"><a href='../../finman/html/MainAccount.html#method-MainAccount-list_child_accounts'><code>finman::MainAccount$list_child_accounts()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="move_balance"><a href='../../finman/html/MainAccount.html#method-MainAccount-move_balance'><code>finman::MainAccount$move_balance()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="set_child_allocation"><a href='../../finman/html/MainAccount.html#method-MainAccount-set_child_allocation'><code>finman::MainAccount$set_child_allocation()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="spending"><a href='../../finman/html/MainAccount.html#method-MainAccount-spending'><code>finman::MainAccount$spending()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="total_income"><a href='../../finman/html/MainAccount.html#method-MainAccount-total_income'><code>finman::MainAccount$total_income()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="walking_amount"><a href='../../finman/html/MainAccount.html#method-MainAccount-walking_amount'><code>finman::MainAccount$walking_amount()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="withdraw"><a href='../../finman/html/MainAccount.html#method-MainAccount-withdraw'><code>finman::MainAccount$withdraw()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildAccount-new"></a>}}
\if{latex}{\out{\hypertarget{method-ChildAccount-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new ChildAccount object by setting the name, allocation,
status, parent, path, and priority. Inherits initialization logic
from the MainAccount class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildAccount$new(
  name,
  allocation = 0,
  status = "active",
  parent = NULL,
  path = NULL,
  priority = 0
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character. The name of the child account.}

\item{\code{allocation}}{Numeric. Allocation weight for distributing funds
(default is 0).}

\item{\code{status}}{Character. Status of the account: "active", "inactive", or
"closed" (default is "active").}

\item{\code{parent}}{MainAccount or NULL. Optional parent account reference.}

\item{\code{path}}{Character or NULL. Path or label to identify account lineage.}

\item{\code{priority}}{Numeric. Priority value used when distributing small
amounts (default is 0).}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Create a basic ChildAccount with default values
acc <- ChildAccount$new(name = "Emergency Fund")

# Create a ChildAccount with custom allocation and priority
acc2 <- ChildAccount$new(
  name = "Education",
  allocation = 0.3,
  status = "active",
  path = "main_account/education",
  priority = 2
)

# View the account status
acc2$get_account_status()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildAccount-deposit"></a>}}
\if{latex}{\out{\hypertarget{method-ChildAccount-deposit}{}}}
\subsection{Method \code{deposit()}}{
Deposits funds into a ChildAccount if the account is active. Records
the transaction, updates the balance, and distributes the funds to any
nested child accounts, if applicable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildAccount$deposit(
  amount,
  transaction_number = NULL,
  by = "User",
  channel = NULL,
  date = Sys.time()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{amount}}{Numeric. Amount of money to deposit. Must be greater
than 0.}

\item{\code{transaction_number}}{Character or NULL. Optional transaction ID. If
NULL, an ID is generated automatically.}

\item{\code{by}}{Character. Identifier for who made the deposit
(default is "User").}

\item{\code{channel}}{Character or NULL. Channel through which the deposit
is made (e.g., "Mobile", "Bank").}

\item{\code{date}}{POSIXct. Timestamp of the transaction
(default is current time).}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method overrides the \code{deposit()} method from the MainAccount
class. It includes a status check to ensure the account is active before
proceeding. If the account is inactive or closed, the deposit is blocked
and a message is printed.
}

\subsection{Returns}{
No return value. Updates the account state and prints a summary.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Create an active child account
acc <- ChildAccount$new(name = "Savings", allocation = 0.5)

# Deposit funds into the account
acc$deposit(amount = 100, channel = "Mobile")

# Attempting to deposit into an inactive account
acc$change_status("inactive")
acc$deposit(amount = 50, channel = "Mobile")  # Will not proceed
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildAccount-change_status"></a>}}
\if{latex}{\out{\hypertarget{method-ChildAccount-change_status}{}}}
\subsection{Method \code{change_status()}}{
Changes the status of the ChildAccount. If the new status is "closed",
the account must have a zero balance; otherwise, an error is thrown.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildAccount$change_status(status)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status}}{Character. The desired new status of the account.
Acceptable values include "active", "inactive", or "closed".}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If the account is already "closed", a message is printed and no changes
are made. If closing is requested and the balance is not zero, an error
is raised to ensure proper fund handling before deactivation.
}

\subsection{Returns}{
No return value. Modifies the account's status in place and
prints a message.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- ChildAccount$new(name = "Emergency Fund", allocation = 0.3)
acc$change_status("inactive")  # Changes status to inactive
acc$change_status("active")    # Re-activates the account

# Attempting to close with non-zero balance triggers error
acc$deposit(100, channel = "Mobile")
\dontrun{
acc$change_status("closed")    # Will raise an error
}

# Withdraw funds then close
acc$withdraw(100, channel = "Transfer")
acc$change_status("closed")    # Successful closure
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildAccount-get_account_status"></a>}}
\if{latex}{\out{\hypertarget{method-ChildAccount-get_account_status}{}}}
\subsection{Method \code{get_account_status()}}{
Retrieves and prints the current status of the child account.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildAccount$get_account_status()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character. The current status of the account: typically
"active", "inactive", or "closed".
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- ChildAccount$new(name = "School Fees", allocation = 0.4)
acc$get_account_status()
# Output: "School Fees is active"
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildAccount-get_priority"></a>}}
\if{latex}{\out{\hypertarget{method-ChildAccount-get_priority}{}}}
\subsection{Method \code{get_priority()}}{
Returns the current priority level assigned to the child account.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildAccount$get_priority()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Numeric. The priority value used in fund distribution
(higher values indicate higher priority).
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- ChildAccount$new(name = "Emergency Fund", priority = 3)
acc$get_priority()
# [1] 3
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildAccount-set_priority"></a>}}
\if{latex}{\out{\hypertarget{method-ChildAccount-set_priority}{}}}
\subsection{Method \code{set_priority()}}{
Updates the priority level of the child account.
Higher priority values indicate a stronger preference for receiving funds
during distribution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildAccount$set_priority(priority)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{priority}}{Numeric. The new priority value to assign to the account.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No return value. Prints a message confirming the new priority.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- ChildAccount$new(name = "Education Fund", priority = 1)
acc$set_priority(5)
# Priority for Education Fund set to 5
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildAccount-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ChildAccount-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildAccount$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
