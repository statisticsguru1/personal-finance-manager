% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{minimal_tree}
\alias{minimal_tree}
\title{Get a Minimal Version of the Account Tree}
\usage{
minimal_tree(
  account,
  n = 30,
  daterange = c(Sys.Date() - 365000, Sys.Date()),
  ts_data = F
)
}
\arguments{
\item{account}{An R6 account object from the \code{finman} package.}

\item{n}{Integer. The number of days within which to compute
the amount due. Default is 30.}

\item{daterange}{A length-2 \code{Date} vector specifying the
date range for statistics (spending, total due, etc.).
Default is from 1,000 years ago to today
(\code{c(Sys.Date() - 365000, Sys.Date())}).}

\item{ts_data}{Logical. If \code{TRUE}, also compute a full
time-series table of daily statistics (income, spending,
allocations, debt) for the specified date range.
Default is \code{FALSE}, which skips building the table
for faster performance.}
}
\value{
A list containing:
  \itemize{
    \item \code{name} – Account name.
    \item \code{account_uuid} – Account unique identifier.
    \item \code{balance} – Current account balance.
    \item \code{transactions} – Transaction history.
    \item \code{child_accounts_list} – Summary list of child accounts
      (name and UUID).
    \item \code{total_balance} – Total balance including child accounts.
    \item \code{total_due} – Total amount due including child accounts.
    \item \code{compute_total_due_within_n_days} – Amount due within the
      specified period.
    \item \code{spending}, \code{total_income}, \code{allocated_amount},
          \code{income_utilization}, \code{walking_amount_due},
          \code{walking_balance} – Computed statistics for the specified
          date range.
    \item \code{time_series} – (Only present if \code{ts_data = TRUE})
          A data frame with columns \code{Date}, \code{Income},
          \code{Spending}, \code{Allocated}, and \code{Overall_Debt}.
    \item \code{parent_uuid}, \code{allocation}, \code{account_status},
          \code{priority} – Additional details for \code{ChildAccount} objects.
    \item \code{due_date}, \code{fixed_amount}, \code{account_type},
          \code{account_freq}, \code{account_periods} – Additional details
          for \code{GrandchildAccount} objects.
    \item \code{child_accounts} – Recursively minimal child account trees.
  }
}
\description{
Retrieves a lightweight representation of an account object,
containing only essential details.
This is particularly useful for front-end initialization,
as it avoids fetching large volumes of data or making multiple
batch requests.
}
\examples{
\dontrun{
library(finman)

# Create main account
main_account <- MainAccount$new("Main")

# Add tier 2 accounts
main_account$add_child_account(
  ChildAccount$new("Needs", allocation = 0.55))
main_account$add_child_account(
  ChildAccount$new("Goals", allocation = 0.25))
main_account$add_child_account(
  ChildAccount$new("Debt Repayment", allocation = 0.20))

# Add tier 3 accounts (example: Needs -> Rent)
main_account$child_accounts$`Needs`$add_child_account(
  GrandchildAccount$new(
    "Rent",
    allocation = 0.20,
    fixed_amount = 7500,
    account_type = "Bill",
    freq = 30,
    due_date = dmy("28-1-2025")
  )
)

# Deposit and withdraw
main_account$deposit(10000, "TXN001", "Mpesa")
main_account$find_account("Rent")$withdraw(200, "TXN005", "Cash")

# Get minimal account tree with time series data
tree <- minimal_tree(main_account, ts_data = TRUE)
}

}
