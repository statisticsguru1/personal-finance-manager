% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grand_child_account.R
\name{GrandchildAccount}
\alias{GrandchildAccount}
\title{GrandAccount Class}
\description{
Extends \code{ChildAccount} to model low-level accounts such as bills,
loans, and targeted savings. Adds time-based logic, due tracking, and
automatic closure/reactivation to ensure intelligent fund allocation.
}
\details{
This class introduces behavior tailored to two main categories:

\strong{1. Periodic Accounts (e.g., Bills, Rent, Fixed Savings):}
\itemize{
  \item Require recurring payments before a \code{due_date}.
  \item If fully funded before the due date, the account is marked
  \code{"inactive"} and any surplus is returned to the parent.
  \item Upon reaching the next due date, the account reactivates
  and begins tracking the next cycle's funding needs.
}

\strong{2. Open-Ended Accounts (e.g., Long-Term Debts, Target Savings):}
\itemize{
  \item Do not rely on \code{due_date} or cycles.
  \item Once the \code{fixed_amount} target is met, the account is
  permanently closed and surplus funds are redirected.
  \item This prevents over-allocation to already satisfied targets.
}

These behaviors:
\itemize{
  \item Guard against poor user allocation strategies by reallocating
  excess funds from fully funded accounts.
  \item Adapt automatically to variable incomes, ensuring flexible
  prioritization (e.g., for freelancers).
  \item Allow non-expert users to benefit from dynamic, self-adjusting
  savings and debt repayment logic over time.
}
}
\section{Methods}{

\describe{
  \item{\code{initialize(...)}}{
    Constructor. Sets allocation, type, due date, fixed target, etc.
  }
  \item{\code{deposit(...)}}{
    Handles reactivation on due date and closes account when target met.
    Returns surplus to parent account for redistribution.
  }
  \item{\code{withdraw(...)}}{
    Withdraws funds and adjusts period tracking accordingly.
  }
  \item{\code{get_/set_} methods}{
    Get/set values for due date, amount, account type, freq, periods.
  }
}
}

\examples{

## ------------------------------------------------
## Method `GrandchildAccount$new`
## ------------------------------------------------

# Initialize a rent account due every 30 days with a fixed monthly cost
library(R6)
library(uuid)
library(tidyverse)
rent <- GrandchildAccount$new(
  name = "Rent",
  allocation = 0.3,
  priority = 2,
  fixed_amount = 75000,
  due_date = Sys.Date() + 30,
  account_type = "Bill",
  freq = 30
)

# Initialize a target savings account without a due date
car_saving <- GrandchildAccount$new(
  name = "Car Fund",
  allocation = 0.2,
  fixed_amount = 500000,
  account_type = "FixedSaving"
)

## ------------------------------------------------
## Method `GrandchildAccount$get_due_date`
## ------------------------------------------------

rent <- GrandchildAccount$new(
  name = "Rent",
  fixed_amount = 75000,
  due_date = Sys.Date() + 30
)
rent$get_due_date()

## ------------------------------------------------
## Method `GrandchildAccount$set_due_date`
## ------------------------------------------------

bill <- GrandchildAccount$new(name = "Electricity", fixed_amount = 5000)
bill$set_due_date(Sys.Date() + 15)

## ------------------------------------------------
## Method `GrandchildAccount$get_fixed_amount`
## ------------------------------------------------

rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 75000)
rent$get_fixed_amount()
#> [1] 75000

## ------------------------------------------------
## Method `GrandchildAccount$set_fixed_amount`
## ------------------------------------------------

rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 50000)
rent$set_fixed_amount(75000)
#> Fixed amount for Rent set to 75000

## ------------------------------------------------
## Method `GrandchildAccount$get_account_type`
## ------------------------------------------------

rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 50000)
rent$set_fixed_amount(75000)
#> Fixed amount for Rent set to 75000


## ------------------------------------------------
## Method `GrandchildAccount$set_account_type`
## ------------------------------------------------

rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 75000)
rent$set_account_type("Bill")
#> Account type for Rent set to Bill

## ------------------------------------------------
## Method `GrandchildAccount$deposit`
## ------------------------------------------------

# main account
main<- MainAccount$new("main")

# child account
child <- ChildAccount$new(
  name = "Emergency Fund",
  allocation = 0.3,
  priority = 2
)

# Grand child account
bill <- GrandchildAccount$new(
  name = "Rent",
  fixed_amount = 75000,
  account_type = "Bill",
  due_date = Sys.Date(),
  freq = 30
)
# attach grand child to parent
main$add_child_account(child)
child$add_child_account(bill)
bill$deposit(75000,channel="ABSA")

# Example with surplus being returned to parent:
bill$deposit(80000,channel="ABSA")

# Example with underpayment:
bill$deposit(20000,channel="ABSA")  # Remains active, shows updated due

## ------------------------------------------------
## Method `GrandchildAccount$withdraw`
## ------------------------------------------------

# Withdraw a partial amount from a fully funded rent account
rent <- GrandchildAccount$new("Rent", fixed_amount = 75000,
account_type = "Bill")
rent$deposit(75000,channel="ABSA")
# Now equivalent to 0.53 of the rent period remaining.
rent$withdraw(35000,channel="ABSA")


## ------------------------------------------------
## Method `GrandchildAccount$get_account_freq`
## ------------------------------------------------

acc <- GrandchildAccount$new(
  "Rent",
  fixed_amount = 1000,
  freq = 30
)
acc$get_account_freq()
# [1] 30

## ------------------------------------------------
## Method `GrandchildAccount$set_account_freq`
## ------------------------------------------------

acc <- GrandchildAccount$new("Water Bill", fixed_amount = 500)
acc$set_account_freq(30)
# Frequency for Water Bill set to 30

## ------------------------------------------------
## Method `GrandchildAccount$get_account_periods`
## ------------------------------------------------

acc <- GrandchildAccount$new(
  "Internet Bill",
  fixed_amount = 2500,
  freq = 30
 )
acc$get_account_periods()
# [1] 1

## ------------------------------------------------
## Method `GrandchildAccount$set_account_periods`
## ------------------------------------------------

acc <- GrandchildAccount$new("Loan Payment", fixed_amount = 10000,
freq = 30)
acc$set_account_periods(3)
# Output: Loan Payment has 3 period(s)
}
\seealso{
\code{\link{ChildAccount}}, \code{\link{MainAccount}}
}
\section{Super classes}{
\code{\link[finman:MainAccount]{finman::MainAccount}} -> \code{\link[finman:ChildAccount]{finman::ChildAccount}} -> \code{GrandchildAccount}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{status}}{Character. "active", "inactive", or "closed".}

\item{\code{due_date}}{POSIXct or NULL. When funding is due (for bills, etc.).}

\item{\code{amount_due}}{Numeric. Amount left to fully fund the account.}

\item{\code{fixed_amount}}{Numeric. Fixed target for each funding cycle.}

\item{\code{account_type}}{Character. e.g., "Bill", "Debt", "FixedSaving".}

\item{\code{freq}}{Numeric or NULL. Cycle length in days (for recurring accounts).}

\item{\code{num_periods}}{Numeric. Number of unpaid cycles.}

\item{\code{Track_dues_and_balance}}{Data frame. History of balance and dues.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GrandchildAccount-new}{\code{GrandchildAccount$new()}}
\item \href{#method-GrandchildAccount-get_due_date}{\code{GrandchildAccount$get_due_date()}}
\item \href{#method-GrandchildAccount-set_due_date}{\code{GrandchildAccount$set_due_date()}}
\item \href{#method-GrandchildAccount-get_fixed_amount}{\code{GrandchildAccount$get_fixed_amount()}}
\item \href{#method-GrandchildAccount-set_fixed_amount}{\code{GrandchildAccount$set_fixed_amount()}}
\item \href{#method-GrandchildAccount-get_account_type}{\code{GrandchildAccount$get_account_type()}}
\item \href{#method-GrandchildAccount-set_account_type}{\code{GrandchildAccount$set_account_type()}}
\item \href{#method-GrandchildAccount-deposit}{\code{GrandchildAccount$deposit()}}
\item \href{#method-GrandchildAccount-withdraw}{\code{GrandchildAccount$withdraw()}}
\item \href{#method-GrandchildAccount-get_account_freq}{\code{GrandchildAccount$get_account_freq()}}
\item \href{#method-GrandchildAccount-set_account_freq}{\code{GrandchildAccount$set_account_freq()}}
\item \href{#method-GrandchildAccount-get_account_periods}{\code{GrandchildAccount$get_account_periods()}}
\item \href{#method-GrandchildAccount-set_account_periods}{\code{GrandchildAccount$set_account_periods()}}
\item \href{#method-GrandchildAccount-clone}{\code{GrandchildAccount$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="add_child_account"><a href='../../finman/html/MainAccount.html#method-MainAccount-add_child_account'><code>finman::MainAccount$add_child_account()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="allocated_amount"><a href='../../finman/html/MainAccount.html#method-MainAccount-allocated_amount'><code>finman::MainAccount$allocated_amount()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="compute_total_balance"><a href='../../finman/html/MainAccount.html#method-MainAccount-compute_total_balance'><code>finman::MainAccount$compute_total_balance()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="compute_total_due"><a href='../../finman/html/MainAccount.html#method-MainAccount-compute_total_due'><code>finman::MainAccount$compute_total_due()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="compute_total_due_within_n_days"><a href='../../finman/html/MainAccount.html#method-MainAccount-compute_total_due_within_n_days'><code>finman::MainAccount$compute_total_due_within_n_days()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="distribute_to_children"><a href='../../finman/html/MainAccount.html#method-MainAccount-distribute_to_children'><code>finman::MainAccount$distribute_to_children()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="find_account"><a href='../../finman/html/MainAccount.html#method-MainAccount-find_account'><code>finman::MainAccount$find_account()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="find_account_by_uuid"><a href='../../finman/html/MainAccount.html#method-MainAccount-find_account_by_uuid'><code>finman::MainAccount$find_account_by_uuid()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="generate_transaction_id"><a href='../../finman/html/MainAccount.html#method-MainAccount-generate_transaction_id'><code>finman::MainAccount$generate_transaction_id()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="get_balance"><a href='../../finman/html/MainAccount.html#method-MainAccount-get_balance'><code>finman::MainAccount$get_balance()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="get_transactions"><a href='../../finman/html/MainAccount.html#method-MainAccount-get_transactions'><code>finman::MainAccount$get_transactions()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="income_utilization"><a href='../../finman/html/MainAccount.html#method-MainAccount-income_utilization'><code>finman::MainAccount$income_utilization()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="is_duplicate_transaction"><a href='../../finman/html/MainAccount.html#method-MainAccount-is_duplicate_transaction'><code>finman::MainAccount$is_duplicate_transaction()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="list_all_accounts"><a href='../../finman/html/MainAccount.html#method-MainAccount-list_all_accounts'><code>finman::MainAccount$list_all_accounts()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="list_child_accounts"><a href='../../finman/html/MainAccount.html#method-MainAccount-list_child_accounts'><code>finman::MainAccount$list_child_accounts()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="move_balance"><a href='../../finman/html/MainAccount.html#method-MainAccount-move_balance'><code>finman::MainAccount$move_balance()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="set_child_allocation"><a href='../../finman/html/MainAccount.html#method-MainAccount-set_child_allocation'><code>finman::MainAccount$set_child_allocation()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="spending"><a href='../../finman/html/MainAccount.html#method-MainAccount-spending'><code>finman::MainAccount$spending()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="total_income"><a href='../../finman/html/MainAccount.html#method-MainAccount-total_income'><code>finman::MainAccount$total_income()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="MainAccount" data-id="walking_amount"><a href='../../finman/html/MainAccount.html#method-MainAccount-walking_amount'><code>finman::MainAccount$walking_amount()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="ChildAccount" data-id="change_status"><a href='../../finman/html/ChildAccount.html#method-ChildAccount-change_status'><code>finman::ChildAccount$change_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="ChildAccount" data-id="get_account_status"><a href='../../finman/html/ChildAccount.html#method-ChildAccount-get_account_status'><code>finman::ChildAccount$get_account_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="ChildAccount" data-id="get_priority"><a href='../../finman/html/ChildAccount.html#method-ChildAccount-get_priority'><code>finman::ChildAccount$get_priority()</code></a></span></li>
<li><span class="pkg-link" data-pkg="finman" data-topic="ChildAccount" data-id="set_priority"><a href='../../finman/html/ChildAccount.html#method-ChildAccount-set_priority'><code>finman::ChildAccount$set_priority()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-new"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new \code{GrandchildAccount} instance with attributes and
tracking suitable for both periodic (e.g., bills, rent, fixed savings)
and open-ended (e.g., long-term debts, target savings) accounts.
Inherits from \code{ChildAccount} and sets up account-specific
parameters like due dates, target amounts, and funding cycles.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$new(
  name,
  allocation = 0,
  priority = 0,
  fixed_amount = 0,
  due_date = NULL,
  account_type = "Expense",
  freq = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character. Name or label of the account
(e.g., "Rent", "Car Loan").}

\item{\code{allocation}}{Numeric. Proportion of parent funds to allocate to
this account. Used during distribution logic. Defaults to 0.}

\item{\code{priority}}{Numeric. Priority weight for redistribution of residual
funds, especially in cases of overflow or unmet allocations.
Defaults to 0.}

\item{\code{fixed_amount}}{Numeric. Target amount required to fully fund the
account per period or in total. Used for both bills and savings goals.}

\item{\code{due_date}}{POSIXct or NULL. Optional due date indicating when
the next funding cycle is expected (for recurring accounts).}

\item{\code{account_type}}{Character. Type of the account: e.g., "Bill", "Debt",
"FixedSaving", or "Expense". Influences reactivation and closure
behavior. Defaults to "Expense".}

\item{\code{freq}}{Numeric or NULL. Frequency in days for periodic accounts to
recur. Required for automated reactivation logic.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The constructor also initializes a data frame
\code{Track_dues_and_balance}
to monitor the account's funding status over time. Each row logs
the current due amount and balance upon deposit or withdrawal.

For accounts of type "Bill", "FixedSaving", or "Debt"
(with a \code{due_date}), the constructor sets up fields that support
 automated activation, deactivation, and fund tracking per cycle.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Initialize a rent account due every 30 days with a fixed monthly cost
library(R6)
library(uuid)
library(tidyverse)
rent <- GrandchildAccount$new(
  name = "Rent",
  allocation = 0.3,
  priority = 2,
  fixed_amount = 75000,
  due_date = Sys.Date() + 30,
  account_type = "Bill",
  freq = 30
)

# Initialize a target savings account without a due date
car_saving <- GrandchildAccount$new(
  name = "Car Fund",
  allocation = 0.2,
  fixed_amount = 500000,
  account_type = "FixedSaving"
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-get_due_date"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-get_due_date}{}}}
\subsection{Method \code{get_due_date()}}{
Retrieves the current due date of the account. This is typically used
for periodic accounts such as bills or fixed savings that require funding
on a recurring schedule.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$get_due_date()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A POSIXct object representing the due date, or \code{NULL}
if no due date is set.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{rent <- GrandchildAccount$new(
  name = "Rent",
  fixed_amount = 75000,
  due_date = Sys.Date() + 30
)
rent$get_due_date()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-set_due_date"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-set_due_date}{}}}
\subsection{Method \code{set_due_date()}}{
Sets a new due date for the account. This is useful for accounts with
periodic funding requirements, such as rent, bills, or fixed savings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$set_due_date(due_date)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{due_date}}{POSIXct. The new due date to assign to the account.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None. Updates the account's \code{due_date} field and prints
a confirmation message.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{bill <- GrandchildAccount$new(name = "Electricity", fixed_amount = 5000)
bill$set_due_date(Sys.Date() + 15)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-get_fixed_amount"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-get_fixed_amount}{}}}
\subsection{Method \code{get_fixed_amount()}}{
Retrieves the fixed amount assigned to the account. This is typically
used in accounts like bills, fixed savings, or loan payments where
a specific amount is expected periodically.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$get_fixed_amount()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Numeric. The fixed amount required by the account.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 75000)
rent$get_fixed_amount()
#> [1] 75000
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-set_fixed_amount"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-set_fixed_amount}{}}}
\subsection{Method \code{set_fixed_amount()}}{
Sets a new fixed amount for the account. This value represents the
expected periodic contribution or payment (e.g., monthly rent, loan
installment).
It also recalculates the current amount due based on the number of unpaid
periods and the account balance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$set_fixed_amount(fixed_amount)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fixed_amount}}{Numeric. The new fixed amount to be assigned to the
account.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None. Updates internal fields and prints a confirmation message.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 50000)
rent$set_fixed_amount(75000)
#> Fixed amount for Rent set to 75000
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-get_account_type"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-get_account_type}{}}}
\subsection{Method \code{get_account_type()}}{
Sets a new fixed amount for the account. This value represents the
expected periodic contribution or payment (e.g., monthly rent, loan
installment).
It also recalculates the current amount due based on the number of unpaid
periods and the account balance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$get_account_type()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fixed_amount}}{Numeric. The new fixed amount to be assigned to the
account.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None. Updates internal fields and prints a confirmation message.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 50000)
rent$set_fixed_amount(75000)
#> Fixed amount for Rent set to 75000

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-set_account_type"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-set_account_type}{}}}
\subsection{Method \code{set_account_type()}}{
Sets the type of the account, which influences how it behaves with
respect to funding, reactivation, and closure policies. This field
is central to determining whether the account is recurring, fixed,
or target-based.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$set_account_type(account_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{account_type}}{Character. One of the supported types such as
\code{"Bill"}, \code{"Debt"}, \code{"FixedSaving"},
\code{"NonFixedSaving"}, or \code{"Expense"}.
Determines how due dates, funding limits, and surplus reallocation
are handled.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
- \code{"Bill"} or \code{"FixedSaving"}: These accounts are period-based
  and are reactivated upon due dates.
- \code{"Debt"} or target savings: Once fully funded, they are closed and
  not reopened.
- \code{"Expense"} or \code{"NonFixedSaving"}: Do not enforce due dates
or strict funding targets.
}

\subsection{Returns}{
None. Sets the \code{account_type} field and prints a
confirmation.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{rent <- GrandchildAccount$new(name = "Rent", fixed_amount = 75000)
rent$set_account_type("Bill")
#> Account type for Rent set to Bill
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-deposit"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-deposit}{}}}
\subsection{Method \code{deposit()}}{
Handles incoming deposits for grandchild accounts, including complex
behavior for fixed-amount accounts such as Bills, FixedSavings,
and Debts. It intelligently manages due dates, period increments,
surplus reallocation, and account status updates.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$deposit(
  amount,
  transaction_number = NULL,
  by = "User",
  channel = NULL,
  date = Sys.time()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{amount}}{Numeric. The amount of money being deposited into the
account.}

\item{\code{transaction_number}}{Character or NULL. Optional unique identifier
for the transaction. If NULL, a new one is generated.}

\item{\code{by}}{Character. The party initiating the transaction
(default is "User").}

\item{\code{channel}}{Character or NULL. The method or channel used for the
transaction (e.g., "Mobile Money").}

\item{\code{date}}{POSIXct. The timestamp for the transaction (defaults to
current system time).}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method supports two core behaviors depending on the type of account:

## 1. Period-based Accounts (`Bill`, `FixedSaving`)
- If the due date has passed, the system automatically increments the
number of unpaid periods
  and extends the due date.
- If the deposited amount fully covers the required amount across all
unpaid periods, the account is marked as `"inactive"` (temporarily
closed).
- Any surplus is redirected to the parent account for reallocation,
ensuring no money is trapped in overfunded accounts.
- The transaction is logged in `Track_dues_and_balance` to track
financial health over time.

## 2. Non-period Accounts (`LongTermDebt`, `TargetSaving`)
- When the required amount is met, the account is permanently closed,
and will not reactivate.
 This design ensures funds are focused on accounts that still need
  attention.

This mechanism encourages automatic reallocation of excess funds to
critical needs without
requiring users to micromanage their allocations — useful especially for
users with fluctuating income.
}

\subsection{Returns}{
None. Internally updates the account status, balance,
due amounts, and transaction history.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# main account
main<- MainAccount$new("main")

# child account
child <- ChildAccount$new(
  name = "Emergency Fund",
  allocation = 0.3,
  priority = 2
)

# Grand child account
bill <- GrandchildAccount$new(
  name = "Rent",
  fixed_amount = 75000,
  account_type = "Bill",
  due_date = Sys.Date(),
  freq = 30
)
# attach grand child to parent
main$add_child_account(child)
child$add_child_account(bill)
bill$deposit(75000,channel="ABSA")

# Example with surplus being returned to parent:
bill$deposit(80000,channel="ABSA")

# Example with underpayment:
bill$deposit(20000,channel="ABSA")  # Remains active, shows updated due
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-withdraw"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-withdraw}{}}}
\subsection{Method \code{withdraw()}}{
Handles withdrawal requests from a grandchild account. The method ensures
sufficient balance is available, updates the internal transaction
tracking, and compensates for
partial withdrawals in fixed-amount accounts by adjusting the effective
number of periods.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$withdraw(
  amount,
  transaction_number = NULL,
  by = "User",
  channel = NULL,
  date = Sys.time()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{amount}}{Numeric. The amount to withdraw from the account.}

\item{\code{transaction_number}}{Character or NULL. Optional transaction
reference ID.}

\item{\code{by}}{Character. The party initiating the withdrawal (default is
"User").}

\item{\code{channel}}{Character or NULL. Source or medium of the transaction
(e.g., "Mobile Money").}

\item{\code{date}}{POSIXct. The date and time of withdrawal (default is current
system time).}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The method performs the following steps:

- Checks whether the account balance is sufficient for the requested
withdrawal.
- If sufficient, it processes the withdrawal via the parent class method.
- It then logs the updated balance and remaining amount due into the
`Track_dues_and_balance` history.

For accounts with a `fixed_amount` (e.g., Bills, FixedSavings, Debts):

- Partial withdrawals are treated as funding reversals and reduce the
number of fulfilled periods.
- This ensures that the system maintains accurate state about what's
left to fulfill for the account,
  without modifying the `fixed_amount` itself.

This mechanism is crucial in dynamic environments where users may
occasionally retrieve money
from priority accounts — e.g., for emergencies — and helps the system
readjust allocation logic
accordingly.
}

\subsection{Returns}{
None. The internal state of the account (balance, period count,
logs) is updated.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Withdraw a partial amount from a fully funded rent account
rent <- GrandchildAccount$new("Rent", fixed_amount = 75000,
account_type = "Bill")
rent$deposit(75000,channel="ABSA")
# Now equivalent to 0.53 of the rent period remaining.
rent$withdraw(35000,channel="ABSA")

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-get_account_freq"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-get_account_freq}{}}}
\subsection{Method \code{get_account_freq()}}{
Retrieves the recurrence frequency of the account, typically used for
accounts with periodic obligations such as bills, fixed savings, or
loans.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$get_account_freq()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This frequency determines how often the account expects funding. For
instance, a rent account with a monthly cycle would have a frequency of
30 (days), while a weekly expense might have 7.

This field is primarily used in due date updates and period tracking,
especially for auto-reactivating accounts like Bills or Fixed Savings
after their due dates lapse.
}

\subsection{Returns}{
The frequency of recurrence, as stored in the account
(e.g., number of days, or a character label like "monthly").
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- GrandchildAccount$new(
  "Rent",
  fixed_amount = 1000,
  freq = 30
)
acc$get_account_freq()
# [1] 30
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-set_account_freq"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-set_account_freq}{}}}
\subsection{Method \code{set_account_freq()}}{
Sets the recurrence frequency of the account, which defines how often the
account expects to be funded.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$set_account_freq(account_freq)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{account_freq}}{Numeric or character value representing the
recurrence frequency.
For example, use `30` for a monthly bill or `"weekly"` if implementing a
custom handler.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This frequency value is crucial for managing due dates and determining
when a new period starts (e.g., when a rent account should reactivate
after a month).It is used in conjunction with the due date to trigger
reactivation and allocation adjustments for fixed-type accounts such as
Bills, Fixed Savings, and Loans. Changing the frequency may affect how
missed or overdue periods are computed going forward.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- GrandchildAccount$new("Water Bill", fixed_amount = 500)
acc$set_account_freq(30)
# Frequency for Water Bill set to 30
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-get_account_periods"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-get_account_periods}{}}}
\subsection{Method \code{get_account_periods()}}{
Retrieves the number of unpaid or active periods associated with the
account.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$get_account_periods()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This is particularly relevant for fixed-type accounts like Bills,
Fixed Savings, or Debts with a defined frequency.
The number of periods (`num_periods`) represents how many cycles have
passed without full funding.
It increases when due dates pass without adequate deposits and decreases
when partial withdrawals are made from already-funded periods.

For example, if a rent account expects funding every 30 days and misses
two cycles, `num_periods` will be 3 (including the current one), and the
system will attempt to fund all missed cycles.
}

\subsection{Returns}{
Numeric value indicating how many periods are currently pending
or tracked for the account.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- GrandchildAccount$new(
  "Internet Bill",
  fixed_amount = 2500,
  freq = 30
 )
acc$get_account_periods()
# [1] 1
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-set_account_periods"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-set_account_periods}{}}}
\subsection{Method \code{set_account_periods()}}{
Manually sets the number of unpaid or active periods for the account.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$set_account_periods(periods)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{periods}}{Numeric value representing the number of periods to
assign.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method allows manual control of how many cycles (e.g., months or
days) are currently due or tracked for the account. It can be used in
administrative corrections or simulations of time passage in budgeting
models.

Use with caution: setting `num_periods` directly may desynchronize with
the actual due date logic unless adjustments are consistently maintained.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{acc <- GrandchildAccount$new("Loan Payment", fixed_amount = 10000,
freq = 30)
acc$set_account_periods(3)
# Output: Loan Payment has 3 period(s)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrandchildAccount-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GrandchildAccount-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrandchildAccount$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
