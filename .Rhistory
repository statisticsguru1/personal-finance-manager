res4 <- httr::POST(
url = "http://127.0.0.1:8000/set_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
uuid = Debts_uuid,
fixed_amount = 500
),
encode = "form"
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 403)
expect_false(parsed4$success)
expect_match(parsed4$error, "grandchild accounts", ignore.case = TRUE)
# --- Invalid: main account ---
res5 <- httr::POST(
url = "http://127.0.0.1:8000/set_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
uuid = uuid,
fixed_amount = 500
),
encode = "form"
)
parsed5 <- jsonlite::fromJSON(rawToChar(res5$content))
expect_equal(httr::status_code(res5), 403)
expect_false(parsed5$success)
expect_match(parsed5$error, "grandchild accounts", ignore.case = TRUE)
# --- Missing UUID ---
res6 <- httr::POST(
url = "http://127.0.0.1:8000/set_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(fixed_amount = 500),
encode = "form"
)
parsed6 <- jsonlite::fromJSON(rawToChar(res6$content))
expect_equal(httr::status_code(res6), 400)
expect_false(parsed6$success)
expect_match(parsed6$error, "UUID is required", ignore.case = TRUE)
})
# ============================================================================
# Testing the /get_fixed_amount endpoint
# ============================================================================
test_that("GET /get_fixed_amount works", {
# --- Valid: Grandchild account ---
res1 <- httr::GET(
url = "http://127.0.0.1:8000/get_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = SubFarming_uuid)
)
parsed1 <- jsonlite::fromJSON(rawToChar(res1$content))
expect_equal(httr::status_code(res1), 200)
expect_true(parsed1$success)
expect_true(is.numeric(parsed1$fixed_amount))
expect_equal(parsed1$uuid, SubFarming_uuid)
# --- Invalid: Main account ---
res2 <- httr::GET(
url = "http://127.0.0.1:8000/get_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = uuid)
)
parsed2 <- jsonlite::fromJSON(rawToChar(res2$content))
expect_equal(httr::status_code(res2), 403)
expect_false(parsed2$success)
expect_match(
parsed2$error,
"only applicable to grandchild accounts",
ignore.case = TRUE
)
# --- Invalid: Child account ---
res3 <- httr::GET(
url = "http://127.0.0.1:8000/get_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = Debts_uuid)
)
parsed3 <- jsonlite::fromJSON(rawToChar(res3$content))
expect_equal(httr::status_code(res3), 403)
expect_false(parsed3$success)
expect_match(
parsed3$error,
"only applicable to grandchild accounts",
ignore.case = TRUE
)
# --- Missing UUID ---
res4 <- httr::GET(
url = "http://127.0.0.1:8000/get_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token))
# No query param
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 400)
expect_false(parsed4$success)
expect_match(parsed4$error, "UUID is required", ignore.case = TRUE)
# --- Non-existent UUID ---
res5 <- httr::GET(
url = "http://127.0.0.1:8000/get_fixed_amount",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = "non-existent-uuid-999")
)
parsed5 <- jsonlite::fromJSON(rawToChar(res5$content))
expect_equal(httr::status_code(res5), 403)
expect_false(parsed5$success)
expect_match(parsed5$error, "Account not found", ignore.case = TRUE)
})
# ============================================================================
# Testing the /set_account_types endpoint
# ============================================================================
test_that("POST /set_account_type works as expected", {
# --- Valid case: grandchild account ---
res1 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
uuid = SubFarming_uuid,
account_type = "Bill"
),
encode = "form"
)
parsed1 <- jsonlite::fromJSON(rawToChar(res1$content))
expect_equal(httr::status_code(res1), 200)
expect_true(parsed1$success)
expect_equal(parsed1$account_type, "Bill")
expect_match(parsed1$message, "Account type updated to")
# --- Missing uuid ---
res2 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(account_type = "Fixed"),
encode = "form"
)
parsed2 <- jsonlite::fromJSON(rawToChar(res2$content))
expect_equal(httr::status_code(res2), 400)
expect_false(parsed2$success)
expect_match(parsed2$error, "UUID is required")
# --- Missing account_type ---
res3 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(uuid = SubFarming_uuid),
encode = "form"
)
parsed3 <- jsonlite::fromJSON(rawToChar(res3$content))
expect_equal(httr::status_code(res3), 400)
expect_false(parsed3$success)
expect_match(parsed3$error, "Account type is required")
# --- Invalid uuid ---
res4 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(uuid = "non-existent-uuid", account_type = "loan"),
encode = "form"
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 403)
expect_false(parsed4$success)
expect_match(parsed4$error, "Account not found")
# --- Wrong class: main account ---
res5 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(uuid = uuid, account_type = "savings"),
encode = "form"
)
parsed5 <- jsonlite::fromJSON(rawToChar(res5$content))
expect_equal(httr::status_code(res5), 403)
expect_false(parsed5$success)
expect_match(parsed5$error, "only applicable to grandchild")
# --- Wrong class: child account ---
res6 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(uuid = Debts_uuid, account_type = "monthly"),
encode = "form"
)
parsed6 <- jsonlite::fromJSON(rawToChar(res6$content))
expect_equal(httr::status_code(res6), 403)
expect_false(parsed6$success)
expect_match(parsed6$error, "only applicable to grandchild")
})
# ============================================================================
# Testing the /get_account_type endpoint
# ============================================================================
test_that("GET /get_account_type works correctly", {
# 1. Valid request (GrandchildAccount)
res1 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = SubFarming_uuid)  # grandchild uuid
)
parsed1 <- jsonlite::fromJSON(rawToChar(res1$content))
expect_equal(httr::status_code(res1), 200)
expect_true(parsed1$success)
expect_equal(parsed1$uuid, SubFarming_uuid)
expect_true(is.character(parsed1$account_type))
# 2. Invalid UUID
res2 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = "invalid-uuid-123")
)
parsed2 <- jsonlite::fromJSON(rawToChar(res2$content))
expect_equal(httr::status_code(res2), 403)
expect_false(parsed2$success)
expect_match(parsed2$error, "Account not found")
# 3. Missing UUID
res3 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_type",
httr::add_headers(Authorization = paste("Bearer", token))
# no uuid param
)
parsed3 <- jsonlite::fromJSON(rawToChar(res3$content))
expect_equal(httr::status_code(res3), 400)
expect_false(parsed3$success)
expect_match(parsed3$error, "UUID is required")
# 4. UUID for non-grandchild account (e.g. child or main)
res4 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_type",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = Debts_uuid)  # this is a child account
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 403)
expect_false(parsed4$success)
expect_match(parsed4$error, "only applicable to grandchild accounts")
})
# ============================================================================
# Testing the /set_account_freq endpoint
# ============================================================================
test_that("POST /set_account_freq works", {
# --- Valid request ---
res1 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
uuid = SubFarming_uuid,
account_freq = "Monthly"
),
encode = "form"
)
parsed1 <- jsonlite::fromJSON(rawToChar(res1$content))
expect_equal(httr::status_code(res1), 200)
expect_true(parsed1$success)
expect_equal(parsed1$freq, "Monthly")
expect_equal(parsed1$uuid, SubFarming_uuid)
# --- Missing uuid ---
res2 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
account_freq = "Monthly"
),
encode = "form"
)
parsed2 <- jsonlite::fromJSON(rawToChar(res2$content))
expect_equal(httr::status_code(res2), 400)
expect_false(parsed2$success)
expect_match(parsed2$error, "UUID is required")
# --- Missing account_freq ---
res3 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
uuid = SubFarming_uuid
),
encode = "form"
)
parsed3 <- jsonlite::fromJSON(rawToChar(res3$content))
expect_equal(httr::status_code(res3), 400)
expect_false(parsed3$success)
expect_match(parsed3$error, "account_freq is required")
# --- Invalid UUID ---
res4 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
uuid = "invalid-uuid",
account_freq = "Weekly"
),
encode = "form"
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 403)
expect_false(parsed4$success)
expect_match(parsed4$error, "Account not found")
# --- Not a grandchild (use child uuid) ---
res5 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
body = list(
uuid = Debts_uuid,  # child uuid
account_freq = "Quarterly"
),
encode = "form"
)
parsed5 <- jsonlite::fromJSON(rawToChar(res5$content))
expect_equal(httr::status_code(res5), 403)
expect_false(parsed5$success)
expect_match(parsed5$error, "only applicable to grandchild")
})
# ============================================================================
# Testing the /get_account_freq endpoint
# ============================================================================
test_that("GET /get_account_freq works", {
# --- Valid grandchild account request ---
res1 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = SubFarming_uuid)  # grandchild
)
parsed1 <- jsonlite::fromJSON(rawToChar(res1$content))
expect_equal(httr::status_code(res1), 200)
expect_true(parsed1$success)
expect_true(is.character(parsed1$freq) || is.null(parsed1$freq))
# --- Invalid UUID ---
res2 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = "invalid-uuid")
)
parsed2 <- jsonlite::fromJSON(rawToChar(res2$content))
expect_equal(httr::status_code(res2), 403)
expect_false(parsed2$success)
expect_match(parsed2$error, "Account not found", ignore.case = TRUE)
# --- Missing UUID ---
res3 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_freq",
httr::add_headers(Authorization = paste("Bearer", token))
# no uuid
)
parsed3 <- jsonlite::fromJSON(rawToChar(res3$content))
expect_equal(httr::status_code(res3), 400)
expect_false(parsed3$success)
expect_match(parsed3$error, "UUID is required", ignore.case = TRUE)
# --- Not applicable to main account ---
res4 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = uuid)  # main
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 403)
expect_false(parsed4$success)
expect_match(
parsed4$error,
"only applicable to grandchild",
ignore.case = TRUE
)
# --- Not applicable to child account ---
res5 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_freq",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = Debts_uuid)  # child
)
parsed5 <- jsonlite::fromJSON(rawToChar(res5$content))
expect_equal(httr::status_code(res5), 403)
expect_false(parsed5$success)
expect_match(
parsed5$error,
"only applicable to grandchild",
ignore.case = TRUE
)
})
# ============================================================================
# Testing the /set_account_periods endpoint
# ============================================================================
test_that("POST /set_account_periods works for valid and invalid cases", {
# --- Valid request to grandchild ---
res1 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_periods",
body = list(
uuid = SubFarming_uuid,
periods = 6
),
encode = "form",
httr::add_headers(Authorization = paste("Bearer", token))
)
parsed1 <- jsonlite::fromJSON(rawToChar(res1$content))
expect_equal(httr::status_code(res1), 200)
expect_true(parsed1$success)
expect_equal(parsed1$periods, 6)
expect_match(parsed1$message, "Number of periods set to 6")
# --- Invalid uuid (not found) ---
res2 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_periods",
body = list(
uuid = "invalid-uuid",
periods = 3
),
encode = "form",
httr::add_headers(Authorization = paste("Bearer", token))
)
parsed2 <- jsonlite::fromJSON(rawToChar(res2$content))
expect_equal(httr::status_code(res2), 403)
expect_false(parsed2$success)
expect_match(parsed2$error, "Account not found")
# --- Missing UUID ---
res3 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_periods",
body = list(
periods = 3
),
encode = "form",
httr::add_headers(Authorization = paste("Bearer", token))
)
parsed3 <- jsonlite::fromJSON(rawToChar(res3$content))
expect_equal(httr::status_code(res3), 400)
expect_false(parsed3$success)
expect_match(parsed3$error, "UUID is required")
# --- Invalid account type: using main account uuid ---
res4 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_periods",
body = list(
uuid = uuid,
periods = 4
),
encode = "form",
httr::add_headers(Authorization = paste("Bearer", token))
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 403)
expect_false(parsed4$success)
expect_match(parsed4$error, "only applicable to grandchild accounts")
# --- Invalid periods (non-numeric) ---
res5 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_periods",
body = list(
uuid = SubFarming_uuid,
periods = "nonsense"
),
encode = "form",
httr::add_headers(Authorization = paste("Bearer", token))
)
parsed5 <- jsonlite::fromJSON(rawToChar(res5$content))
expect_equal(httr::status_code(res5), 400)
expect_false(parsed5$success)
expect_match(parsed5$error, "Invalid number of periods")
# --- Invalid periods (negative value) ---
res6 <- httr::POST(
url = "http://127.0.0.1:8000/set_account_periods",
body = list(
uuid = SubFarming_uuid,
periods = -3
),
encode = "form",
httr::add_headers(Authorization = paste("Bearer", token))
)
parsed6 <- jsonlite::fromJSON(rawToChar(res6$content))
expect_equal(httr::status_code(res6), 400)
expect_false(parsed6$success)
expect_match(parsed6$error, "Invalid number of periods")
})
# ============================================================================
# Testing the /get_account_periods
# ============================================================================
test_that("GET /get_account_periods works correctly", {
# --- Valid request for a grandchild account ---
res1 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_periods",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = SubFarming_uuid)
)
parsed1 <- jsonlite::fromJSON(rawToChar(res1$content))
expect_equal(httr::status_code(res1), 200)
expect_true(parsed1$success)
expect_equal(parsed1$uuid, SubFarming_uuid)
expect_true(is.numeric(parsed1$periods))
# --- Missing UUID ---
res2 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_periods",
httr::add_headers(Authorization = paste("Bearer", token))
# No UUID
)
parsed2 <- jsonlite::fromJSON(rawToChar(res2$content))
expect_equal(httr::status_code(res2), 400)
expect_false(parsed2$success)
expect_match(parsed2$error, "UUID is required")
# --- UUID does not exist ---
res3 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_periods",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = "nonexistent-uuid-1234")
)
parsed3 <- jsonlite::fromJSON(rawToChar(res3$content))
expect_equal(httr::status_code(res3), 403)
expect_false(parsed3$success)
expect_match(parsed3$error, "Account not found")
# --- Child account (invalid class) ---
res4 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_periods",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = Debts_uuid)
)
parsed4 <- jsonlite::fromJSON(rawToChar(res4$content))
expect_equal(httr::status_code(res4), 403)
expect_false(parsed4$success)
expect_match(parsed4$error, "only applicable to grandchild accounts")
# --- Main account (invalid class) ---
res5 <- httr::GET(
url = "http://127.0.0.1:8000/get_account_periods",
httr::add_headers(Authorization = paste("Bearer", token)),
query = list(uuid = uuid)
)
parsed5 <- jsonlite::fromJSON(rawToChar(res5$content))
expect_equal(httr::status_code(res5), 403)
expect_false(parsed5$success)
expect_match(parsed5$error, "only applicable to grandchild accounts")
})
covr::file_coverage(source_files =  "api/plumber.R",test_files = "api/tests/test_endpoints.R")
covr::code_coverage()
covr::file_coverage(source_files =  "api/plumber.R",test_files = "api/tests/test_endpoints.R")
covr::environment_coverage()
covr::file_coverage(source_files =  "api/main.R",test_files = "api/tests/test_endpoints.R")
covr::file_coverage(source_files =  "api/plumber.R",test_files = "api/tests/test_endpoints.R")
