}
# ğŸ”§ Run main.R via callr
server <- callr::r_bg(
function(main_file, jwt, base_dir) {
Sys.setenv(JWT_SECRET = jwt)
Sys.setenv(ACCOUNT_BASE_DIR = base_dir)
source(main_file)
},
args = list(
main_file = here("api", "main.R"),
jwt = secret_key,
base_dir = tmp_dir
),
stdout = "|", stderr = "|"
)
withr::defer(server$kill(), envir = globalenv())
wait_for_server_ready()
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
# ğŸª™ Make the deposit
valid_token <- jwt_encode_hmac(
jwt_claim(user_id = "user123", role = "user"),
secret = secret_key
)
res <- POST(
url = "http://127.0.0.1:8000/deposit",
add_headers(Authorization = paste("Bearer", valid_token)),
body = list(
uuid = uuid,
amount = 1000,
channel = "bank"
),
encode = "form"
)
cat("Status Code:", status_code(res), "\n")
print(content(res))
library(testthat)
library(httr)
library(jose)
library(withr)
library(here)
library(callr)
devtools::load_all()
Sys.setenv(JWT_SECRET = "test-secret")
secret_key <- Sys.getenv("JWT_SECRET")
#tmp_dir <- local_tempdir()
tmp_dir <- tempfile("test-account-base-")
dir.create(tmp_dir, recursive = TRUE)
Sys.setenv(ACCOUNT_BASE_DIR = tmp_dir)
# Create test user
create_user_account_base(
user_id = "user123",
base_dir = tmp_dir,
initial_balance = 1000
)
uuid <- load_user_account("user123")$uuid
# âœ… Server wait helper
wait_for_server_ready <- function(
url = "http://127.0.0.1:8000/__ping__",
timeout = 10
) {
start_time <- Sys.time()
while (as.numeric(Sys.time() - start_time, units = "secs") < timeout) {
res <- tryCatch(httr::GET(url), error = function(e) NULL)
if (!is.null(res) && httr::status_code(res) == 200) return(TRUE)
Sys.sleep(0.25)
}
stop("Server did not become ready within timeout.")
}
# ğŸ”§ Run main.R via callr
server <- callr::r_bg(
function(main_file, jwt, base_dir) {
Sys.setenv(JWT_SECRET = jwt)
Sys.setenv(ACCOUNT_BASE_DIR = base_dir)
source(main_file)
},
args = list(
main_file = here("api", "main.R"),
jwt = secret_key,
base_dir = tmp_dir
),
stdout = "|", stderr = "|"
)
withr::defer(server$kill(), envir = globalenv())
wait_for_server_ready()
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
# ğŸª™ Make the deposit
valid_token <- jwt_encode_hmac(
jwt_claim(user_id = "user123", role = "user"),
secret = secret_key
)
res <- POST(
url = "http://127.0.0.1:8000/deposit",
add_headers(Authorization = paste("Bearer", valid_token)),
body = list(
uuid = uuid,
amount = 1000,
channel = "bank"
),
encode = "form"
)
cat("Status Code:", status_code(res), "\n")
print(content(res))
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
library(testthat)
library(httr)
library(jose)
library(withr)
library(here)
library(callr)
devtools::load_all()
Sys.setenv(JWT_SECRET = "test-secret")
secret_key <- Sys.getenv("JWT_SECRET")
#tmp_dir <- local_tempdir()
tmp_dir <- tempfile("test-account-base-")
dir.create(tmp_dir, recursive = TRUE)
Sys.setenv(ACCOUNT_BASE_DIR = tmp_dir)
# Create test user
create_user_account_base(
user_id = "user123",
base_dir = tmp_dir,
initial_balance = 1000
)
uuid <- load_user_account("user123")$uuid
# âœ… Server wait helper
wait_for_server_ready <- function(
url = "http://127.0.0.1:8000/__ping__",
timeout = 10
) {
start_time <- Sys.time()
while (as.numeric(Sys.time() - start_time, units = "secs") < timeout) {
res <- tryCatch(httr::GET(url), error = function(e) NULL)
if (!is.null(res) && httr::status_code(res) == 200) return(TRUE)
Sys.sleep(0.25)
}
stop("Server did not become ready within timeout.")
}
# ğŸ”§ Run main.R via callr
server <- callr::r_bg(
function(main_file, jwt, base_dir) {
Sys.setenv(JWT_SECRET = jwt)
Sys.setenv(ACCOUNT_BASE_DIR = base_dir)
source(main_file)
},
args = list(
main_file = here("api", "main.R"),
jwt = secret_key,
base_dir = tmp_dir
),
stdout = "|", stderr = "|"
)
withr::defer(server$kill(), envir = globalenv())
wait_for_server_ready()
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
# ğŸª™ Make the deposit
valid_token <- jwt_encode_hmac(
jwt_claim(user_id = "user123", role = "user"),
secret = secret_key
)
res <- POST(
url = "http://127.0.0.1:8000/deposit",
add_headers(Authorization = paste("Bearer", valid_token)),
body = list(
uuid = uuid,
amount = 1000,
channel = "bank"
),
encode = "form"
)
cat("Status Code:", status_code(res), "\n")
print(content(res))
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
here::here("api", "main.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
cat("Output:\n")
cat(server$read_output_lines(), sep = "\n")
testthat::test_file("api/tests/test_endpoints.R")
print(here("api", "main.R"))
library(testthat)
library(httr)
library(jose)
library(withr)
library(here)
library(callr)
devtools::load_all()
Sys.setenv(JWT_SECRET = "test-secret")
secret_key <- Sys.getenv("JWT_SECRET")
#tmp_dir <- local_tempdir()
tmp_dir <- tempfile("test-account-base-")
dir.create(tmp_dir, recursive = TRUE)
Sys.setenv(ACCOUNT_BASE_DIR = tmp_dir)
# Create test user
create_user_account_base(
user_id = "user123",
base_dir = tmp_dir,
initial_balance = 1000
)
uuid <- load_user_account("user123")$uuid
# âœ… Server wait helper
wait_for_server_ready <- function(
url = "http://127.0.0.1:8000/__ping__",
timeout = 10
) {
start_time <- Sys.time()
while (as.numeric(Sys.time() - start_time, units = "secs") < timeout) {
res <- tryCatch(httr::GET(url), error = function(e) NULL)
if (!is.null(res) && httr::status_code(res) == 200) return(TRUE)
Sys.sleep(0.25)
}
stop("Server did not become ready within timeout.")
}
# ğŸ”§ Run main.R via callr
server <- callr::r_bg(
function(main_file, jwt, base_dir) {
Sys.setenv(JWT_SECRET = jwt)
Sys.setenv(ACCOUNT_BASE_DIR = base_dir)
source(main_file)
},
args = list(
main_file = here("api", "main.R"),
jwt = secret_key,
base_dir = tmp_dir
),
stdout = "|", stderr = "|"
)
withr::defer(server$kill(), envir = globalenv())
wait_for_server_ready()
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
# ğŸª™ Make the deposit
valid_token <- jwt_encode_hmac(
jwt_claim(user_id = "user123", role = "user"),
secret = secret_key
)
res <- POST(
url = "http://127.0.0.1:8000/deposit",
add_headers(Authorization = paste("Bearer", valid_token)),
body = list(
uuid = uuid,
amount = 1000,
channel = "bank"
),
encode = "form"
)
cat("Status Code:", status_code(res), "\n")
print(content(res))
library(testthat)
library(httr)
library(jose)
library(withr)
library(here)
library(callr)
devtools::load_all()
Sys.setenv(JWT_SECRET = "test-secret")
secret_key <- Sys.getenv("JWT_SECRET")
#tmp_dir <- local_tempdir()
tmp_dir <- tempfile("test-account-base-")
dir.create(tmp_dir, recursive = TRUE)
Sys.setenv(ACCOUNT_BASE_DIR = tmp_dir)
# Create test user
create_user_account_base(
user_id = "user123",
base_dir = tmp_dir,
initial_balance = 1000
)
uuid <- load_user_account("user123")$uuid
# âœ… Server wait helper
wait_for_server_ready <- function(
url = "http://127.0.0.1:8000/__ping__",
timeout = 10
) {
start_time <- Sys.time()
while (as.numeric(Sys.time() - start_time, units = "secs") < timeout) {
res <- tryCatch(httr::GET(url), error = function(e) NULL)
if (!is.null(res) && httr::status_code(res) == 200) return(TRUE)
Sys.sleep(0.25)
}
stop("Server did not become ready within timeout.")
}
# ğŸ”§ Run main.R via callr
server <- callr::r_bg(
function(main_file, jwt, base_dir) {
Sys.setenv(JWT_SECRET = jwt)
Sys.setenv(ACCOUNT_BASE_DIR = base_dir)
source(main_file)
},
args = list(
main_file = here("api", "main.R"),
jwt = secret_key,
base_dir = tmp_dir
),
stdout = "|", stderr = "|"
)
withr::defer(server$kill(), envir = globalenv())
wait_for_server_ready()
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
# ğŸª™ Make the deposit
valid_token <- jwt_encode_hmac(
jwt_claim(user_id = "user123", role = "user"),
secret = secret_key
)
res <- POST(
url = "http://127.0.0.1:8000/deposit",
add_headers(Authorization = paste("Bearer", valid_token)),
body = list(
uuid = uuid,
amount = 1000,
channel = "bank"
),
encode = "form"
)
cat("Status Code:", status_code(res), "\n")
print(content(res))
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
library(covr)
?covr::report()
?covr::file_report()
file_coverage("api/plumber.R", "api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
file_coverage("api/plumber.R", "api/tests/test_endpoints.R")
covr::file_coverage("api/plumber.R", "api/tests/test_endpoints.R")
covr::file_report("api/plumber.R", "api/tests/test_endpoints.R")
covr::file_report()
covr::code_coverage("api/plumber.R", "api/tests/test_endpoints.R")
covr::code_coverage("api/plumber.R", "api/tests/test_endpoints.R")
?covr::code_coverage()
covr::file_coverage("api/plumber.R", "api/tests/test_endpoints.R")
covr::file_coverage("api/plumber.R", "api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
testthat::test_file("api/tests/test_endpoints.R")
library(testthat)
library(httr)
library(jose)
library(withr)
library(here)
library(callr)
devtools::load_all()
Sys.setenv(JWT_SECRET = "test-secret")
secret_key <- Sys.getenv("JWT_SECRET")
#tmp_dir <- local_tempdir()
tmp_dir <- tempfile("test-account-base-")
dir.create(tmp_dir, recursive = TRUE)
Sys.setenv(ACCOUNT_BASE_DIR = tmp_dir)
# Create test user
create_user_account_base(
user_id = "user123",
base_dir = tmp_dir,
initial_balance = 1000
)
uuid <- load_user_account("user123")$uuid
# âœ… Server wait helper
wait_for_server_ready <- function(
url = "http://127.0.0.1:8000/__ping__",
timeout = 10
) {
start_time <- Sys.time()
while (as.numeric(Sys.time() - start_time, units = "secs") < timeout) {
res <- tryCatch(httr::GET(url), error = function(e) NULL)
if (!is.null(res) && httr::status_code(res) == 200) return(TRUE)
Sys.sleep(0.25)
}
stop("Server did not become ready within timeout.")
}
# ğŸ”§ Run main.R via callr
server <- callr::r_bg(
function(main_file, jwt, base_dir) {
Sys.setenv(JWT_SECRET = jwt)
Sys.setenv(ACCOUNT_BASE_DIR = base_dir)
source(main_file)
},
args = list(
main_file = here("api", "main.R"),
jwt = secret_key,
base_dir = tmp_dir
),
stdout = "|", stderr = "|"
)
withr::defer(server$kill(), envir = globalenv())
wait_for_server_ready()
library(testthat)
library(httr)
library(jose)
library(withr)
library(here)
library(callr)
devtools::load_all()
Sys.setenv(JWT_SECRET = "test-secret")
secret_key <- Sys.getenv("JWT_SECRET")
#tmp_dir <- local_tempdir()
tmp_dir <- tempfile("test-account-base-")
dir.create(tmp_dir, recursive = TRUE)
Sys.setenv(ACCOUNT_BASE_DIR = tmp_dir)
# Create test user
create_user_account_base(
user_id = "user123",
base_dir = tmp_dir,
initial_balance = 1000
)
uuid <- load_user_account("user123")$uuid
# âœ… Server wait helper
wait_for_server_ready <- function(
url = "http://127.0.0.1:8000/__ping__",
timeout = 10
) {
start_time <- Sys.time()
while (as.numeric(Sys.time() - start_time, units = "secs") < timeout) {
res <- tryCatch(httr::GET(url), error = function(e) NULL)
if (!is.null(res) && httr::status_code(res) == 200) return(TRUE)
Sys.sleep(0.25)
}
stop("Server did not become ready within timeout.")
}
# ğŸ”§ Run main.R via callr
server <- callr::r_bg(
function(main_file, jwt, base_dir) {
Sys.setenv(JWT_SECRET = jwt)
Sys.setenv(ACCOUNT_BASE_DIR = base_dir)
source(main_file)
},
args = list(
main_file = here("api", "main.R"),
jwt = secret_key,
base_dir = tmp_dir
),
stdout = "|", stderr = "|"
)
withr::defer(server$kill(), envir = globalenv())
wait_for_server_ready()
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
# ğŸª™ Make the deposit
valid_token <- jwt_encode_hmac(
jwt_claim(user_id = "user123", role = "user"),
secret = secret_key
)
res <- POST(
url = "http://127.0.0.1:8000/deposit",
add_headers(Authorization = paste("Bearer", valid_token)),
body = list(
uuid = uuid,
amount = 1000,
channel = "bank"
),
encode = "form"
)
cat("Status Code:", status_code(res), "\n")
print(content(res))
res2 <- POST(
url = "http://127.0.0.1:8000/distribute",
add_headers(Authorization = paste("Bearer", valid_token)),
body = list(
uuid = uuid,
amount = 300
),
encode = "form"
)
cat("Distribution Status Code:", status_code(res2), "\n")
print(content(res2))
cat("Server output:\n")
cat(server$read_output_lines(), sep = "\n")
cat("Server errors:\n")
cat(server$read_error_lines(), sep = "\n")
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::document()
devtools::document()
